feat(tools): Upgrade POST_SOAK_SNAPSHOT to schema v1.1 with metadata

MEGA-PROMPT — 5 Enhancements to extract_post_soak_snapshot.py:

PROBLEM:
❌ Snapshot v1.0 lacks freeze readiness indicator
❌ No time range information
❌ No KPI_GATE parity verification
❌ No anomaly detection
❌ No signature loop tracking
❌ No pretty-print mode for debugging

SOLUTION — Schema v1.1 with 6 New Fields + --pretty Flag:

1️⃣ **freeze_ready** (bool)
   Logic: verdict ∈ {PASS, WARN} AND pass_count_last8 ≥ 6 AND freeze_seen
   Purpose: Production freeze readiness indicator

2️⃣ **time_range** (object)
   Fields: {"from": "earliest_timestamp", "to": "latest_timestamp"}
   Source: Last 8 iterations runtime_utc
   Purpose: Temporal coverage analysis

3️⃣ **kpi_gate_parity** (bool | null)
   Logic: Compare snapshot.verdict with KPI_GATE.json verdict
   Values: true (match), false (mismatch), null (no KPI_GATE.json)
   Purpose: Cross-validation with external KPI gate

4️⃣ **anomalies_count** (int)
   Detects:
   - latency_spike: p95_latency_ms > 400 (350 + 50)
   - risk_jump: Δrisk > +0.15 vs previous iteration
   - maker_taker_drop: maker_taker_ratio < 0.75
   Purpose: Quality/stability metric

5️⃣ **signature_loops** (int)
   Algorithm: Detect A→B→A patterns in runtime signatures (3-window)
   Purpose: Configuration oscillation detection

6️⃣ **schema_version** (string)
   Value: "1.1"
   Purpose: Version tracking for backward compatibility

BONUS: **--pretty Flag**
   Usage: python -m tools.soak.extract_post_soak_snapshot --pretty
   Effect: Pretty-print JSON with indent=2
   Purpose: Human-readable output for debugging

IMPLEMENTATION:

tools/soak/extract_post_soak_snapshot.py (~430 lines, +~140 lines)

NEW FUNCTIONS:
✅ _extract_time_range(summaries)
   → Extract earliest/latest timestamps from last 8 iterations

✅ _check_kpi_gate_parity(base_path, verdict)
   → Compare snapshot verdict with KPI_GATE.json
   → Returns: bool (match) | None (no KPI_GATE)

✅ _count_anomalies(summaries)
   → Count latency spikes, risk jumps, maker/taker drops
   → Returns: int (total anomaly count)

✅ _detect_signature_loops(summaries)
   → Detect A→B→A signature oscillation patterns
   → Returns: int (loop count)

UPDATED FUNCTIONS:
✅ _extract_from_iters()
   → Add all 6 new fields to snapshot

✅ extract_snapshot()
   → Enrich POST_SOAK_SUMMARY.json with missing fields
   → Use setdefault() to preserve existing values

✅ main()
   → Add --pretty argument
   → Conditional JSON formatting (indent=2 vs compact)
   → File always compact, stdout respects --pretty

SCHEMA COMPARISON:

v1.0 (6 fields):
{
  "verdict": "PASS",
  "pass_count_last8": 6,
  "freeze_seen": true,
  "kpi_last8": {...},
  "guards_last8": {...}
}

v1.1 (12 fields):
{
  "schema_version": "1.1",                    [NEW]
  "verdict": "PASS",
  "pass_count_last8": 6,
  "freeze_seen": true,
  "freeze_ready": true,                       [NEW]
  "kpi_last8": {...},
  "guards_last8": {...},
  "time_range": {                             [NEW]
    "from": "2025-10-16T13:25:00Z",
    "to": "2025-10-16T14:00:00Z"
  },
  "kpi_gate_parity": null,                    [NEW]
  "anomalies_count": 0,                       [NEW]
  "signature_loops": 2                        [NEW]
}

TESTING:

Test Data: 24 iterations (artifacts/soak/test_run/latest)

$ python -m tools.soak.extract_post_soak_snapshot --path "artifacts/soak/test_run/latest" --pretty

Output (pretty):
{
  "anomalies_count": 0,
  "freeze_ready": true,
  "freeze_seen": true,
  "guards_last8": {
    "cooldown_count": 1,
    "freeze_events": 3,
    "oscillation_count": 0,
    "velocity_count": 1
  },
  "kpi_gate_parity": null,
  "kpi_last8": {
    "maker_taker_ratio": {"mean": 0.9, "median": 0.9},
    "net_bps": {"mean": 3.138, "median": 3.15},
    "p95_latency_ms": {"mean": 305.0, "median": 305.0},
    "risk_ratio": {"mean": 0.41, "median": 0.41}
  },
  "pass_count_last8": 6,
  "schema_version": "1.1",
  "signature_loops": 2,
  "time_range": {
    "from": "2025-10-16T13:25:00Z",
    "to": "2025-10-16T14:00:00Z"
  },
  "verdict": "PASS"
}

Output (compact, no --pretty):
{"anomalies_count":0,"freeze_ready":true,"freeze_seen":true,"guards_last8":{"cooldown_count":1,"freeze_events":3,"oscillation_count":0,"velocity_count":1},"kpi_gate_parity":null,"kpi_last8":{"maker_taker_ratio":{"mean":0.9,"median":0.9},"net_bps":{"mean":3.138,"median":3.15},"p95_latency_ms":{"mean":305.0,"median":305.0},"risk_ratio":{"mean":0.41,"median":0.41}},"pass_count_last8":6,"schema_version":"1.1","signature_loops":2,"time_range":{"from":"2025-10-16T13:25:00Z","to":"2025-10-16T14:00:00Z"},"verdict":"PASS"}

VERIFICATION:

✅ schema_version: "1.1"
✅ freeze_ready: true (verdict=PASS, pass_count=6, freeze_seen=true)
✅ time_range: {"from": "...", "to": "..."} (last 8 iterations)
✅ kpi_gate_parity: null (no KPI_GATE.json found)
✅ anomalies_count: 0 (no latency spikes, risk jumps, or MT drops)
✅ signature_loops: 2 (detected A→B→A patterns)
✅ --pretty flag: works (indent=2 vs compact)
✅ File output: always compact (deterministic)

FIELD DETAILS:

1. freeze_ready: true
   Calculation: PASS in (PASS, WARN) ✅
                pass_count_last8 = 6 ≥ 6 ✅
                freeze_seen = true ✅
   Result: true ✅

2. time_range:
   Source: summary.runtime_utc from last 8 iterations
   from: min(timestamps) = "2025-10-16T13:25:00Z"
   to: max(timestamps) = "2025-10-16T14:00:00Z"
   Duration: 35 minutes (7 iterations × 5 min)

3. kpi_gate_parity: null
   Reason: KPI_GATE.json not found in test data
   If found: would compare verdict fields

4. anomalies_count: 0
   Checked:
   - ❌ No p95_latency_ms > 400 (max: 330ms)
   - ❌ No risk jumps > +0.15 (max delta: ~0.06)
   - ❌ No maker_taker_ratio < 0.75 (min: 0.88)

5. signature_loops: 2
   Pattern: sig_a1b2 → sig_e5f6 → sig_a1b2
   Windows: [iterations 18-20] and [21-23]

USAGE EXAMPLES:

# Compact (CI/CD pipelines)
python -m tools.soak.extract_post_soak_snapshot | jq '.freeze_ready'

# Pretty (debugging)
python -m tools.soak.extract_post_soak_snapshot --pretty

# Check freeze readiness
FREEZE_READY=$(python -m tools.soak.extract_post_soak_snapshot | python -c "import json, sys; print(json.load(sys.stdin)['freeze_ready'])")

# Verify KPI parity
PARITY=$(python -m tools.soak.extract_post_soak_snapshot | jq '.kpi_gate_parity')

# Count anomalies
ANOMALIES=$(python -m tools.soak.extract_post_soak_snapshot | jq '.anomalies_count')

CI/CD INTEGRATION:

GitHub Actions:
- name: Extract soak snapshot
  id: snapshot
  run: |
    python -m tools.soak.extract_post_soak_snapshot --pretty
    
    # Parse new fields
    FREEZE_READY=$(jq -r '.freeze_ready' artifacts/soak/latest/POST_SOAK_SNAPSHOT.json)
    ANOMALIES=$(jq -r '.anomalies_count' artifacts/soak/latest/POST_SOAK_SNAPSHOT.json)
    SIGNATURE_LOOPS=$(jq -r '.signature_loops' artifacts/soak/latest/POST_SOAK_SNAPSHOT.json)
    
    echo "FREEZE_READY=$FREEZE_READY" >> $GITHUB_OUTPUT
    echo "ANOMALIES=$ANOMALIES" >> $GITHUB_OUTPUT
    echo "SIGNATURE_LOOPS=$SIGNATURE_LOOPS" >> $GITHUB_OUTPUT

- name: Check freeze readiness
  if: steps.snapshot.outputs.FREEZE_READY != 'true'
  run: |
    echo "❌ Not ready for freeze"
    exit 1

- name: Alert on anomalies
  if: steps.snapshot.outputs.ANOMALIES > 5
  run: |
    echo "⚠️ High anomaly count: ${{ steps.snapshot.outputs.ANOMALIES }}"

BACKWARD COMPATIBILITY:

✅ All v1.0 fields preserved
✅ New fields added via setdefault() (no overwrites)
✅ Schema version field for client detection
✅ File format unchanged (compact JSON)

ACCEPTANCE CRITERIA:

- [x] freeze_ready field added (bool logic)
- [x] time_range field added (from/to timestamps)
- [x] kpi_gate_parity field added (bool | null)
- [x] anomalies_count field added (int counter)
- [x] signature_loops field added (int counter)
- [x] schema_version field added ("1.1")
- [x] --pretty flag implemented
- [x] All fields deterministic
- [x] Backward compatible with v1.0
- [x] Tests passing (24 iterations)
- [x] No linter errors

BENEFITS:

✅ Freeze readiness indicator (no manual calculation)
✅ Temporal coverage tracking (time_range)
✅ External validation (kpi_gate_parity)
✅ Quality metrics (anomalies_count)
✅ Oscillation detection (signature_loops)
✅ Debugging support (--pretty flag)
✅ Version tracking (schema_version)
✅ Backward compatible (v1.0 clients work)

FILES:
- tools/soak/extract_post_soak_snapshot.py (~430 lines, +~140 lines)
- artifacts/soak/test_run/latest/POST_SOAK_SNAPSHOT.json (updated schema)
- COMMIT_MESSAGE_SNAPSHOT_V1_1.txt (this file)

IMPACT:
Before: ❌ 6 fields, ❌ No metadata, ❌ No pretty mode
After:  ✅ 12 fields, ✅ Rich metadata, ✅ --pretty for debugging

---

**Status:** ✅ COMPLETE
**Schema:** v1.1 (6 new fields)
**Tested:** ✅ 24 iterations, all fields validated
**Ready for:** Production use, CI/CD integration, monitoring

