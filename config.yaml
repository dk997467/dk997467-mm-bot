# Market Maker Bot Configuration
# Bybit V5 USDT Perpetuals

# Trading Configuration
symbols: ["BTCUSDT", "ETHUSDT"]
use_testnet: true

# Spread and Laddering
base_spread_bps: 1.0
ladder_levels: 3
ladder_step_bps: 0.5
quote_refresh_ms: 100

# Risk Management
max_position_usd: 5000
target_inventory_usd: 0
inventory_skew_gamma: 0.1
daily_max_loss_usd: 300
max_cancels_per_min: 90

# Order Management
post_only: true
min_notional_usd: 10
maker_fee_bps: 1.0
taker_fee_bps: 1.0

# Strategy Parameters
volatility_lookback_sec: 30
imbalance_weight: 0.4
microprice_weight: 0.6
k_vola: 0.5
k_imb: 0.2
t_imb: 0.1
risk_buffer_bps: 2.0
skew_k: 0.1
max_skew_bps: 30.0

# Enhanced Strategy Features
strategy:
  # Feature flags
  enable_enhanced_quoting: true  # Enable EnhancedQuoter integration
  enable_dynamic_spread: true
  enable_inventory_skew: true
  enable_adverse_guard: true
 
guards:
  pos_skew:
    per_symbol_abs_limit: 0.0   # base units, 0=disabled
    per_color_abs_limit: 0.0    # base units, 0=disabled
  intraday_caps:
    daily_pnl_stop: 0.0      # EUR, 0=disabled
    daily_turnover_cap: 0.0  # USD, 0=disabled
    daily_vol_cap: 0.0       # %

allocator:
  smoothing:
    bias_cap_ratio: 0.20        # доля, [0.0,1.0]

# Micro signals configuration
signals:
  impact_cap_ratio: 0.10
  weights:
    imbalance: 0.5
    micro_tilt: 0.3
    sigma_regime: 0.2
  sigma_bands:
    - [0.00, 0.80, "low"]
    - [0.80, 1.50, "mid"]
    - [1.50, 9.99, "high"]
  regime_bias_map:
    low: 1
    mid: 0
    high: -1

ha_failover:
  lock_key: "mm:quoter:leader"
  ttl_ms: 3000
  renew_ms: 1500
  idempotency_ttl_ms: 5000

fees:
  bybit:
    distance_usd_threshold: 25000.0  # trigger near next tier (USD left)
    min_improvement_bps: 0.2         # required fee improvement to act
  
  # Spread parameters
  k_vola_spread: 0.95
  min_spread_bps: 2
  max_spread_bps: 25
  
  # Inventory skew
  skew_coeff: 0.3
  imbalance_cutoff: 0.65
  
  # Order book levels
  levels_per_side: 3
  level_spacing_coeff: 0.4
  
  # Volatility parameters
  vola_half_life_s: 60
  microprice_drift_bps: 3
  imbalance_levels: 5
  guard_pause_ms: 300
  
  # Order management
  min_time_in_book_ms: 500
  replace_threshold_bps: 3
  
  # Research and backtesting parameters
  slip_bps: 2.0  # Estimated slippage in basis points

# Order Limits and Rate Control
limits:
  max_active_per_side: 3
  max_create_per_sec: 4.0
  max_cancel_per_sec: 4.0

# Order Management and Efficiency
max_quote_levels: 3                # levels per side
max_active_orders_per_symbol: 30   # hard cap (both sides total)
max_new_orders_per_sec: 5.0        # create rate limiter
quote_refresh_ms: 800              # do not refresh more often unless price moved
amend_price_threshold_bps: 1.0     # if price change < threshold → amend in place
amend_size_threshold: 0.2          # relative size change to amend
cancel_stale_ms: 60000             # cancel orders older than this if off-market
backoff_on_reject_ms: 1500         # on "Active order limit exceeded" or rejects

# Order Management and Efficiency
max_quote_levels: 3                # levels per side
max_active_orders_per_symbol: 30   # hard cap (both sides total)
max_new_orders_per_sec: 5          # create rate limiter
quote_refresh_ms: 800              # do not refresh more often unless price moved
amend_price_threshold_bps: 1.0     # if price change < threshold → amend in place
amend_size_threshold: 0.2          # relative size change to amend
cancel_stale_ms: 60000             # cancel orders older than this if off-market
backoff_on_reject_ms: 1500         # on "Active order limit exceeded" or rejects

# Performance Tuning
max_active_orders_per_side: 10
price_band_tolerance_bps: 2.0
max_retry_attempts: 3

# Storage Configuration
storage:
  backend: "parquet"  # parquet, csv, or sqlite
  compress: "zstd"     # zstd, gzip, or none
  batch_size: 1000     # Records per batch
  flush_ms: 200        # Flush interval in milliseconds

# Monitoring
metrics_port: 8000
health_port: 8001
log_level: "INFO"

# Storage Configuration
storage:
  backend: "parquet"  # "parquet", "sqlite", "postgres"
  parquet_path: "./data"
  batch_size: 1000
  flush_ms: 200
  compress: "zstd"  # "zstd" or null for no compression
  sqlite_path: "./data/market_maker.db"
  pg_host: "localhost"
  pg_port: 5432
  pg_database: "market_maker"
  pg_username: "market_maker"
  pg_password: "market_maker_pass"
  pg_schema: "public"

# Database Configuration (Legacy - kept for backward compatibility)
storage_type: "parquet"  # "parquet", "sqlite", "postgres"
parquet_path: "./data"
sqlite_path: "./data/market_maker.db"
postgres_url: "postgresql://user:pass@localhost:5432/market_maker"

# WebSocket Configuration
ws_reconnect_delay_ms: 1000
ws_max_reconnect_attempts: 10
ws_ping_interval_sec: 30
ws_pong_timeout_sec: 10

# REST API Configuration
rest_timeout_sec: 10
rest_max_retries: 3
rest_retry_delay_ms: 1000

# Live Sim configuration
sim:
  mode: "queue_aware"  # conservative | queue_aware
  queue:
    initial_qpos_ratio: 0.50
    queue_penalty_bps: 0.8
    adverse_fill_prob: 0.0
  fees:
    maker_bps: -2.0
    taker_bps: 5.0

# Latency Boost (Throttle & Batch Cancel)
latency_boost:
  replace:
    max_concurrent: 2
    min_interval_ms: 40  # Reduced from 60 to 40ms for lower latency
    backoff_on_rate_limit_ms: 200  # Auto-backoff when hitting rate limits
  tail_batch:
    tail_age_ms: 800
    max_batch: 10
    jitter_ms: 0

# Fast Cancel Configuration
fast_cancel:
  enabled: true
  cancel_threshold_bps: 3.0  # Cancel and replace if price moves >3bps from order price
  cooldown_after_spike_ms: 500  # Cooldown period after volatile spike
  spike_threshold_bps: 10.0  # Threshold to detect volatile spike (>10bps move)

# Taker Cap Configuration (anti-slippage)
taker_cap:
  enabled: true
  max_taker_fills_per_hour: 50  # Max number of taker fills per hour
  max_taker_share_pct: 10.0  # Max taker share as % of all fills per hour
  rolling_window_sec: 3600  # Rolling window for tracking (1 hour)

# Queue-Aware Quoting (micro-positioning for better fills)
queue_aware:
  enabled: true
  max_reprice_bps: 0.5  # Max micro-adjustment in bps to improve queue position
  headroom_ms: 150  # Min interval between queue-based reprices
  join_threshold_pct: 30.0  # Nudge if queue position worse than X percentile
  book_depth_levels: 3  # Number of book levels to analyze

# Inventory-Skew (auto-rebalancing via spread adjustment)
inventory_skew:
  enabled: true
  target_pct: 0.0  # Target inventory as % of max position (0 = neutral)
  max_skew_bps: 0.6  # Maximum bid/ask skew in bps
  slope_bps_per_1pct: 0.1  # Skew strength per 1% inventory deviation
  clamp_pct: 5.0  # Ignore noise below ±5% inventory

# Adaptive Spread (dynamic spread based on market conditions)
adaptive_spread:
  enabled: true
  base_spread_bps: 1.0  # Base spread
  min_spread_bps: 0.6  # Minimum spread
  max_spread_bps: 2.5  # Maximum spread
  vol_window_sec: 60  # EMA window for volatility
  depth_levels: 5  # Book levels for liquidity analysis
  liquidity_sensitivity: 0.4  # Weight for liquidity score
  vol_sensitivity: 0.6  # Weight for volatility score
  latency_sensitivity: 0.3  # Weight for latency score
  pnl_dev_sensitivity: 0.3  # Weight for PnL deviation score
  clamp_step_bps: 0.2  # Max spread change per tick
  cooloff_ms: 200  # Cooldown after rapid change

# Risk Guards (SOFT/HARD protection)
risk_guards:
  enabled: true
  # Volatility guards
  vol_ema_sec: 60
  vol_hard_bps: 25.0  # Hard stop if vol > 25 bps
  vol_soft_bps: 15.0  # Soft warning if vol > 15 bps
  # Latency guards
  latency_p95_hard_ms: 450  # Hard stop if p95 > 450ms
  latency_p95_soft_ms: 300  # Soft warning if p95 > 300ms
  # PnL drawdown guards
  pnl_window_min: 60  # Rolling window (minutes)
  pnl_soft_z: -1.5  # Soft if z-score < -1.5σ
  pnl_hard_z: -2.5  # Hard if z-score < -2.5σ
  # Inventory guards
  inventory_pct_soft: 6.0  # Soft if |inv| > 6%
  inventory_pct_hard: 10.0  # Hard if |inv| > 10%
  # Taker series guard
  taker_fills_window_min: 15  # Rolling window (minutes)
  taker_fills_soft: 12  # Soft if ≥12 taker fills
  taker_fills_hard: 20  # Hard if ≥20 taker fills
  # Actions
  size_scale_soft: 0.5  # Scale order size by 0.5x in SOFT
  halt_ms_hard: 2000  # Halt quoting for 2s in HARD

# Chaos Engineering (resilience testing)
chaos:
  enabled: false  # Master switch: set to true for chaos testing
  dry_run: true  # Shadow mode: no real orders (safe testing)
  
  # Scenario intensities (0.0-1.0, 0=disabled)
  net_loss: 0.0  # Packet loss (0.3 = 30%)
  exch_429: 0.0  # HTTP 429 rate limit waves
  exch_5xx: 0.0  # HTTP 5xx errors (0.1 = 10%)
  lat_spike_ms: 0  # Latency burst duration (200 = 200ms spikes)
  ws_lag_ms: 0  # WebSocket lag (150 = 150ms delays)
  ws_disconnect: 0.0  # WS disconnect probability per minute (0.05 = 5%)
  dns_flap: 0.0  # DNS failures (0.05 = 5%)
  clock_skew_ms: 0  # Clock drift (80 = 80ms skew)
  mem_pressure: none  # Memory pressure: none/low/medium/high
  rate_limit_storm: 0.0  # Aggressive rate limits (0.4 = 40%)
  reconcile_mismatch: 0.0  # Order state mismatches (0.1 = 10%)
  
  # Burst control (duty cycle)
  burst_on_sec: 30  # Burst active duration
  burst_off_sec: 90  # Burst inactive duration

# Performance Tracing (for canary deployment and diagnostics)
trace:
  enabled: true  # Feature flag: set to false to disable tracing overhead
  sample_rate: 0.2  # Sample 1 in 5 ticks (20%)
  deadline_ms: 200.0  # Deadline for tick (for deadline_miss tracking)
  export_golden: true  # Export golden traces to artifacts/traces/
  golden_trace_interval: 100  # Export golden trace every N ticks

# Async Batching (parallel execution + command coalescing)
async_batch:
  enabled: true  # Feature flag: set to false for rollback to sequential
  max_parallel_symbols: 10  # Max concurrent symbol processing per tick
  coalesce_cancel: true  # Coalesce N cancel → 1 batch-cancel
  coalesce_place: true  # Coalesce M place → ≤2 calls
  max_batch_size: 20  # Max orders per batch (Bybit API limit)
  tick_deadline_ms: 200  # Target P95 tick duration (ms)