name: Alert Self-Test (Daily)

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—ë—Ä—Ç–æ–≤ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º CRIT
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ø–æ—á–∫—É: generate_fake_summary ‚Üí runner ‚Üí alerts ‚Üí Redis

on:
  schedule:
    - cron: "7 7 * * *"  # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 07:07 UTC
  workflow_dispatch:
    inputs:
      verdict:
        description: 'Verdict level (crit/warn/ok)'
        required: false
        default: 'crit'
        type: choice
        options:
          - crit
          - warn
          - ok

jobs:
  alert-selftest:
    name: Alert Self-Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      PYTHONPATH: ${{ github.workspace }}
      VERDICT_LEVEL: ${{ github.event.inputs.verdict || 'crit' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Lint - forbid artifact v3
        run: |
          set -euo pipefail
          if git grep -nE 'actions/(upload|download)-artifact\s*[@:]\s*v3(\b|[^0-9])' .github | tee /dev/stderr; then
            echo "Found deprecated artifact actions v3 ‚Äî must use @v4" >&2
            exit 1
          fi
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install requests python-dotenv redis
      
      - name: Generate fake CRIT summary
        run: |
          echo "================================================"
          echo "GENERATING FAKE SUMMARY: $VERDICT_LEVEL"
          echo "================================================"
          
          mkdir -p reports/analysis
          
          if [ "$VERDICT_LEVEL" = "crit" ]; then
            python -m tools.soak.generate_fake_summary --crit --out reports/analysis
          elif [ "$VERDICT_LEVEL" = "warn" ]; then
            python -m tools.soak.generate_fake_summary --warn --out reports/analysis
          else
            python -m tools.soak.generate_fake_summary --ok --out reports/analysis
          fi
          
          echo ""
          echo "=== Generated Summary Preview ==="
          cat reports/analysis/SOAK_SUMMARY.json | head -30
          echo ""
          echo "=== Violations Count ==="
          cat reports/analysis/VIOLATIONS.json | jq '. | length'
      
      - name: Create fake ITER files for runner
        run: |
          # Create dummy ITER files (runner needs glob match)
          mkdir -p reports/analysis
          echo '{"window": 1, "symbol": "FAKE"}' > reports/analysis/FAKE_ITER_001.json
          
          # Symlink summary as FAKE_SUMMARY.json so runner can process it
          ln -sf SOAK_SUMMARY.json reports/analysis/FAKE_SUMMARY.json || true
      
      - name: Run continuous runner (self-test mode)
        id: runner
        continue-on-error: true
        env:
          REDIS_URL: ${{ secrets.REDIS_URL_DEV || 'redis://localhost:6379/0' }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || '' }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID || '' }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
        run: |
          echo "================================================"
          echo "RUNNING CONTINUOUS RUNNER (SELF-TEST)"
          echo "================================================"
          
          # Run with special configuration for self-test:
          # - min-windows 1 (accept fake data)
          # - max-iterations 1 (single run)
          # - alert-debounce-min 0 (no debounce for testing)
          # - separate heartbeat key (avoid prod pollution)
          
          python -m tools.soak.continuous_runner \
            --iter-glob "reports/analysis/FAKE_*.json" \
            --min-windows 1 \
            --max-iterations 1 \
            --out-dir reports/analysis \
            --env dev \
            --exchange bybit \
            --redis-url "${REDIS_URL}" \
            --ttl 600 \
            --stream \
            --stream-maxlen 1000 \
            --alert telegram \
            --alert-policy "dev=WARN,staging=WARN,prod=CRIT" \
            --alert-debounce-min 0 \
            --heartbeat-key "dev:bybit:soak:runner:selftest_heartbeat" \
            --verbose || echo "[WARN] Runner completed with warnings (expected for self-test)"
          
          echo ""
          echo "================================================"
          echo "SELF-TEST COMPLETE"
          echo "Expected behavior:"
          echo "- CRIT verdict ‚Üí alert should be sent"
          echo "- WARN verdict ‚Üí alert should be sent (dev policy)"
          echo "- OK verdict ‚Üí no alert"
          echo "================================================"
      
      - name: Verify artifacts created
        if: always()
        run: |
          echo "=== Checking artifacts ==="
          
          if [ -f reports/analysis/SOAK_SUMMARY.json ]; then
            echo "‚úì SOAK_SUMMARY.json exists"
            cat reports/analysis/SOAK_SUMMARY.json | jq '.overall.verdict'
          else
            echo "‚úó SOAK_SUMMARY.json missing"
          fi
          
          if [ -f reports/analysis/VIOLATIONS.json ]; then
            echo "‚úì VIOLATIONS.json exists"
            VIOL_COUNT=$(cat reports/analysis/VIOLATIONS.json | jq '. | length')
            echo "  Violations count: $VIOL_COUNT"
          else
            echo "‚úó VIOLATIONS.json missing"
          fi
          
          if [ -f artifacts/state/last_export_status.json ]; then
            echo "‚úì Export status marker exists"
            cat artifacts/state/last_export_status.json
          else
            echo "‚Ñπ Export status marker not found (expected if Redis unavailable)"
          fi
      
      - name: Upload self-test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: alert-selftest-${{ github.run_id }}
          path: |
            reports/analysis/**
            artifacts/state/**
          if-no-files-found: warn
          retention-days: 7
      
      - name: Summary
        if: always()
        run: |
          echo "================================================"
          echo "ALERT SELF-TEST SUMMARY"
          echo "================================================"
          echo "Run ID: ${{ github.run_id }}"
          echo "Verdict Level: $VERDICT_LEVEL"
          echo "Runner Status: ${{ steps.runner.outcome }}"
          echo ""
          echo "üìù Notes:"
          echo "- This is a self-test, not a real soak run"
          echo "- Uses separate Redis keys (selftest_heartbeat)"
          echo "- Debounce disabled (alert-debounce-min=0)"
          echo "- Does not affect prod alert state"
          echo ""
          echo "‚úÖ Check Telegram/Slack for alert delivery"
          echo "================================================"

