name: CI Nightly (fast)

on:
  schedule:
    - cron: "0 2 * * *"    # ?????? ???? 02:00 UTC
  workflow_dispatch:
jobs:
  fast-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_NO_PYTHON_VERSION_WARNING: "1"
      # Test credentials for CI environment (not real keys)
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
      STORAGE_PG_PASSWORD: "test_pg_password_for_ci_only"

    steps:
      - uses: actions/checkout@v4

      - name: Lint - forbid artifact v3
        run: |
          set -euo pipefail
          if git grep -nE 'actions/(upload|download)-artifact\s*[@:]\s*v3(\b|[^0-9])' .github | tee /dev/stderr; then
            echo "Found deprecated artifact actions v3 — must use @v4" >&2
            exit 1
          fi

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          echo "=== Filtering requirements.txt ==="
          
          # Filter out private/local packages (case-insensitive, flexible matching)
          # Log filtered lines to stderr, only pass through clean dependencies to stdout
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*mm-orderbook/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*mm_orderbook/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*git\+ssh:/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*git\+https:/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            {print}
          ' requirements.txt > requirements_ci.txt
          
          echo ""
          echo "=== Generated requirements_ci.txt ==="
          cat requirements_ci.txt
          
          echo ""
          echo "=== GATE: Verify mm-orderbook not in requirements_ci.txt ==="
          if grep -i "mm.orderbook\|mm_orderbook" requirements_ci.txt; then
            echo "❌ GATE FAILED: mm-orderbook found in requirements_ci.txt"
            echo "This should never happen - check AWK filter logic"
            exit 1
          fi
          echo "✓ GATE PASSED: mm-orderbook correctly filtered out"

      - name: Install base dependencies
        run: |
          python -m pip install -U pip
          pip install maturin
          echo "✓ pip and maturin installed"

      - name: Install project with Rust module (editable)
        run: |
          echo "=== Building and installing mm-bot with Rust extensions ==="
          pip install -e . -v
          echo ""
          echo "=== Smoke test: import mm_orderbook ==="
          python -c "import mm_orderbook; print('✓ mm_orderbook import OK')"

      - name: Install remaining dependencies
        run: |
          echo "=== Installing external dependencies from requirements_ci.txt ==="
          pip install -r requirements_ci.txt
          echo ""
          echo "=== Final package list ==="
          pip list

      - name: Run fast e2e (verbose, targeted)
        run: |
          pytest -vv -s --maxfail=1 tests/e2e/test_full_stack_validation.py
      
      - name: Golden regression check
        id: golden
        continue-on-error: true
        run: |
          # Check if golden files exist
          if [ -f "tests/golden/EDGE_REPORT_case1.json" ] && [ -f "artifacts/golden/EDGE_REPORT_latest.json" ]; then
            python -m tools.tests.golden_compare \
              --baseline tests/golden/EDGE_REPORT_case1.json \
              --actual artifacts/golden/EDGE_REPORT_latest.json \
              --fail-on-drift
          else
            echo "[WARN] Golden files not found, skipping regression check"
            exit 0
          fi
      
      - name: Check gates
        if: always()
        run: |
          GOLDEN_EXIT="${{ steps.golden.outcome }}"
          
          echo "Golden Regression: $GOLDEN_EXIT"
          
          if [ "$GOLDEN_EXIT" = "failure" ]; then
            echo "❌ Golden regression detected"
            exit 1
          fi
          
          echo "✅ All gates passed"

      - name: Upload artifacts (90 days by default)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-fast-artifacts
          path: |
            artifacts/**
            .pytest_cache/**
          if-no-files-found: ignore
          retention-days: 30

  # ===========================================================================
  # SOAK TESTS WITH STRICT GATES: For nightly validation
  # ===========================================================================
  soak-strict:
    name: Soak Tests (strict gates)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONPATH: "${{ github.workspace }}"
      SOAK_SLEEP_SECONDS: "10"
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
      STORAGE_PG_PASSWORD: "test_pg_password_for_ci_only"
    
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {next}
            /^[[:space:]]*mm-orderbook/ {next}
            /^[[:space:]]*mm_orderbook/ {next}
            /^[[:space:]]*git\+/ {next}
            {print}
          ' requirements.txt > requirements_ci.txt
          
          echo "pydantic>=2,<3" >> requirements_ci.txt
          echo "pydantic-settings>=2,<3" >> requirements_ci.txt
          echo "pandas>=2,<3" >> requirements_ci.txt
      
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install maturin
          pip install -e . -v
          pip install -r requirements_ci.txt
      
      - name: Run soak (24 iterations, strict, with warmup)
        run: |
          echo "================================================"
          echo "NIGHTLY SOAK: 24 iterations (strict mode)"
          echo "================================================"
          echo "[NIGHTLY MODE] Warmup enabled for realistic testing"
          echo "[NIGHTLY MODE] Strict gates: last-8 must PASS"
          echo "[NIGHTLY MODE] Delta verify: full_apply_ratio >= 0.95"
          echo "================================================"
          
          rm -rf artifacts/soak/latest
          python -m tools.soak.run \
            --iterations 24 \
            --mock \
            --auto-tune \
            --warmup \
            --preset maker_bias_uplift_v1
      
      - name: Verify delta application (strict, threshold 95%)
        shell: bash
        run: |
          echo "================================================"
          echo "DELTA VERIFICATION (STRICT)"
          echo "Threshold: >=95.0% (nightly mode)"
          echo "================================================"
          
          ROOT="artifacts/soak/latest"
          if compgen -G "$ROOT/ITER_SUMMARY_*.json" > /dev/null; then
            TARGET="$ROOT"
          elif compgen -G "$ROOT/soak/latest/ITER_SUMMARY_*.json" > /dev/null; then
            TARGET="$ROOT/soak/latest"
          else
            echo "Error: ITER_SUMMARY_* not found"
            exit 1
          fi
          
          # Run verifier with strict threshold (95%)
          python -m tools.soak.verify_deltas_applied \
            --path "$TARGET" \
            --threshold 0.95 \
            --strict
          
          if [ $? -ne 0 ]; then
            echo "❌ Strict delta verification FAILED"
            exit 1
          fi
          echo "✓ Strict delta verification passed"
      
      - name: Build reports (strict, blocking)
        shell: bash
        run: |
          echo "================================================"
          echo "GENERATING REPORTS (STRICT)"
          echo "================================================"
          
          ROOT="artifacts/soak/latest"
          OUT="$ROOT/reports/analysis"
          mkdir -p "$OUT"
          
          python -m tools.soak.build_reports --src "$ROOT" --out "$OUT" --last-n 8
          
          if [ $? -ne 0 ]; then
            echo "❌ Report generation FAILED"
            exit 1
          fi
          echo "✓ Reports generated"
      
      - name: Post-Soak Audit (strict, fail on HOLD)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          
          echo "================================================"
          echo "POST-SOAK AUDIT (STRICT MODE)"
          echo "================================================"
          
          python -m tools.soak.audit_artifacts \
            --base artifacts/soak/latest \
            --fail-on-hold
      
      - name: Export warm-up metrics for Prometheus
        if: always()
        shell: bash
        run: |
          echo "================================================"
          echo "EXPORTING WARM-UP METRICS (NIGHTLY)"
          echo "================================================"
          
          ROOT="artifacts/soak/latest"
          if compgen -G "$ROOT/ITER_SUMMARY_*.json" > /dev/null; then
            TARGET="$ROOT"
          elif compgen -G "$ROOT/soak/latest/ITER_SUMMARY_*.json" > /dev/null; then
            TARGET="$ROOT/soak/latest"
          else
            echo "[WARN] No ITER_SUMMARY files found"
            exit 0
          fi
          
          python -m tools.soak.export_warmup_metrics \
            --path "$TARGET" \
            --output "$ROOT/reports/analysis/warmup_metrics.prom"
          
          if [ $? -eq 0 ]; then
            echo "✓ Warm-up metrics exported (nightly)"
          fi
          
          echo "================================================"
      
      - name: Upload soak artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-soak-strict-${{ github.run_id }}
          path: |
            artifacts/soak/latest/reports/
            artifacts/soak/latest/soak/latest/TUNING_REPORT.json
            artifacts/soak/latest/soak/latest/ITER_SUMMARY_*.json
            artifacts/soak/latest/ITER_SUMMARY_*.json
          if-no-files-found: warn
          retention-days: 60

