name: Soak (Windows self-hosted, 24-72h)

on:
  workflow_dispatch:
    inputs:
      soak_hours:
        description: "How many hours to run (24..72)"
        required: false
        default: "24"
  schedule:
    - cron: "0 2 * * 1" # Понедельник в 02:00 UTC

concurrency:
  group: soak-windows
  cancel-in-progress: false

jobs:
  soak:
    runs-on: [self-hosted, windows, soak]
    defaults:
      run:
        shell: pwsh
    timeout-minutes: 4380 # 73 часа (с запасом)
    env:
      PYTHON_EXE: C:\Program Files\Python313\python.exe
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_NO_PYTHON_VERSION_WARNING: "1"
      SOAK_HOURS: ${{ inputs.soak_hours || '24' }}
      API_KEY: ${{ secrets.API_KEY }}
      API_SECRET: ${{ secrets.API_SECRET }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
      HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Rust toolchain via PowerShell
        id: install-rust
        run: |
          Write-Host "--- Installing Rust toolchain ---"
          Invoke-WebRequest -Uri "https://win.rustup.rs/x86_64" -OutFile "rustup-init.exe"
          # FIX: Explicitly install the self-contained 'gnu' toolchain to avoid MSVC dependency
          ./rustup-init.exe -y --no-modify-path --default-toolchain stable-gnu
          
          $cargo_bin_path = "$($env:USERPROFILE)\.cargo\bin"
          
          # Update PATH for the CURRENT step to make verification commands work
          Write-Host "Adding cargo to PATH for the current step..."
          $env:PATH = "$cargo_bin_path;" + $env:PATH
          
          # Update PATH for ALL SUBSEQUENT steps
          Write-Host "Adding cargo to PATH for all subsequent steps..."
          echo $cargo_bin_path | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          
          Write-Host "Verifying Rust installation..."
          rustc --version
          cargo --version

      - name: Setup Environment
        id: setup-env
        if: always()
        run: |
          New-Item -ItemType Directory -Force "${{ github.workspace }}\artifacts\soak" | Out-Null

      - name: Cache pip dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Verify Python installation
        id: verify-python
        run: |
          Write-Host "Using configured Python:"
          & $env:PYTHON_EXE --version
          & $env:PYTHON_EXE -m pip --version
          & $env:PYTHON_EXE -m pip install --upgrade pip

      - name: Prepare CI requirements file
        id: prepare-reqs
        run: |
          Get-Content requirements.txt |
            Where-Object { $_ -notmatch '^(?i)bybit-connector' -and $_ -notmatch '^(?i)git\+' -and $_ -notmatch '^(?i)mm-orderbook' } |
            Set-Content requirements_ci.txt -Encoding ASCII

      - name: Install Python dependencies
        id: install-deps
        run: |
          & $env:PYTHON_EXE -m pip install -r requirements_ci.txt

      - name: Install local project package
        id: install-local
        run: |
          Write-Host "--- Installing local mm-bot package ---"
          # No need for -v anymore, but we can leave it
          & $env:PYTHON_EXE -m pip install -e . -v

      - name: Start transcript and write summary
        id: start-transcript
        run: |
          Start-Transcript -Path "${{ github.workspace }}\artifacts\soak\soak_windows.log" -Append | Out-Null
          "SOAK started: $(Get-Date -Format s)Z" | Out-File "${{ github.workspace }}\artifacts\soak\summary.txt" -Encoding ascii
          "Git rev: $(git rev-parse --short HEAD)" | Add-Content "${{ github.workspace }}\artifacts\soak\summary.txt"
          $pythonVersion = (& $env:PYTHON_EXE --version)
          "Python: $pythonVersion" | Add-Content "${{ github.workspace }}\artifacts\soak\summary.txt"

      - name: Run long soak loop
        id: soak-loop
        run: |
          $durationHours = [int]$env:SOAK_HOURS
          if ($durationHours -lt 1 -or $durationHours -gt 72) { $durationHours = 24 }
          $deadline = (Get-Date).AddHours($durationHours)
          Write-Host "Target duration (hours): $durationHours (deadline: $deadline UTC)"

          while ((Get-Date) -lt $deadline) {
            try {
              & $env:PYTHON_EXE tools\ci\full_stack_validate.py
              Write-Host "[INFO] validate ok $(Get-Date -Format s)Z"
            } catch {
              Write-Host "[ERROR] $_"
            }
            # Heartbeat: каждые 5 минут
            Start-Sleep -Seconds 300
            Write-Host "[HB] alive $(Get-Date -Format s)Z"
          }

      - name: Finalize and snapshot
        id: finalize
        if: always()
        run: |
          Write-Host "--- Finalize log files before snapshotting ---"
          "SOAK finished: $(Get-Date -Format s)Z" | Add-Content "${{ github.workspace }}\artifacts\soak\summary.txt" -ErrorAction SilentlyContinue
          Stop-Transcript -ErrorAction SilentlyContinue | Out-Null
          
          Write-Host "--- Snapshotting environment ---"
          & $env:PYTHON_EXE -m pip freeze | Out-File "${{ github.workspace }}\artifacts\soak\pip-freeze.txt" -Encoding ascii
          git status -sb | Out-File "${{ github.workspace }}\artifacts\soak\git-status.txt" -Encoding ascii
          Get-ChildItem "${{ github.workspace }}\artifacts" -Recurse -File |
            Get-FileHash -Algorithm SHA256 |
            ConvertTo-Json -Depth 5 |
            Out-File "${{ github.workspace }}\artifacts\soak\hash_manifest.json" -Encoding ascii
          Get-ChildItem "${{ github.workspace }}\artifacts\soak" | Sort-Object Length -Descending |
            Select-Object Name,Length,LastWriteTime |
            Out-File "${{ github.workspace }}\artifacts\soak\ls.txt" -Encoding ascii

      - name: Upload artifacts
        id: upload-artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: soak-windows-${{ github.run_id }}
          path: |
            ${{ github.workspace }}/artifacts/**
            ${{ github.workspace }}/.pytest_cache/**
          if-no-files-found: ignore
          retention-days: 14

      - name: Telegram notify on failure
        id: notify-telegram
        if: failure() && env.TELEGRAM_BOT_TOKEN && env.TELEGRAM_CHAT_ID
        run: |
          $msg = "❌ SOAK failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} (commit $(git rev-parse --short HEAD))"
          $uri = "https://api.telegram.org/bot$env:TELEGRAM_BOT_TOKEN/sendMessage"
          Invoke-RestMethod -Uri $uri -Method POST -Body @{
            chat_id = "$env:TELEGRAM_CHAT_ID"
            text    = $msg
          } | Out-Null

