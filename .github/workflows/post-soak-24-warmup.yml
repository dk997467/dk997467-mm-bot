name: Post-Soak Analysis (24 iters, warmup)

on:
  workflow_dispatch:
    inputs:
      iterations:
        description: "Number of iterations"
        required: true
        default: "24"
      sleep_seconds:
        description: "Sleep between iterations (seconds)"
        required: true
        default: "300"
      enable_warmup:
        description: "Enable warm-up/ramp-down"
        required: true
        default: "true"
      preset:
        description: "Soak preset"
        required: true
        default: "maker_bias_uplift_v1"
      delta_threshold:
        description: "Delta-verify threshold (0.60 PR / 0.95 nightly)"
        required: true
        default: "0.60"

jobs:
  post_soak_24:
    runs-on: self-hosted
    timeout-minutes: 180
    env:
      ARTIFACTS_ROOT: artifacts
      SOAK_ARTIFACTS_DIR: artifacts/soak
      CI_ARTIFACTS_DIR: artifacts/ci
      PYTHON_EXE: python
      SOAK_SLEEP_SECONDS: ${{ inputs.sleep_seconds }}

    steps:
      - uses: actions/checkout@v4

      - name: Prepare minimal requirements for CI
        run: echo ok

      - name: Install base dependencies
        run: echo ok

      - name: Install project with Rust module (editable)
        run: echo ok

      - name: Install remaining dependencies
        run: echo ok

      - name: Run 24-iteration soak with auto-tuning (warmup=${{ inputs.enable_warmup }})
        shell: pwsh
        run: |
          Write-Host "================================================"
          Write-Host "POST-SOAK 24 (warmup=${{ inputs.enable_warmup }})"
          Write-Host "================================================"
          $it = [int]"${{ inputs.iterations }}"
          $warm = if ("${{ inputs.enable_warmup }}".ToLower() -eq "true") { "--warmup" } else { "" }
          $preset = "${{ inputs.preset }}"
          & $env:PYTHON_EXE -m tools.soak.run `
            --iterations $it `
            --auto-tune `
            --mock `
            $warm `
            --preset $preset
          if ($LASTEXITCODE -ne 0) { throw "Soak failed ($LASTEXITCODE)" }

      - name: Verify delta application (soft gate)
        shell: pwsh
        continue-on-error: true
        env:
          PYTHON_EXE: python
        run: |
          Write-Host "================================================"
          Write-Host "DELTA VERIFICATION (non-strict, soft gate)"
          Write-Host "Threshold: ${{ inputs.delta_threshold }}"
          Write-Host "================================================"
          & $env:PYTHON_EXE -m tools.soak.verify_deltas_applied `
            --path "artifacts/soak/latest" `
            --threshold "${{ inputs.delta_threshold }}"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Delta verification returned exit code $LASTEXITCODE (non-blocking)"
          } else {
            Write-Host "✓ Delta verification passed"
          }
          Write-Host "================================================"

      - name: Build reports (non-blocking)
        shell: pwsh
        continue-on-error: true
        env:
          PYTHON_EXE: python
        run: |
          Write-Host "================================================"
          Write-Host "GENERATING REPORTS (non-blocking)"
          Write-Host "================================================"
          & $env:PYTHON_EXE -m tools.soak.build_reports `
            --src "artifacts/soak/latest" `
            --out "artifacts/soak/latest/reports/analysis"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Report generation returned exit code $LASTEXITCODE (non-blocking)"
          } else {
            Write-Host "✓ Reports generated"
          }
          Write-Host "================================================"

      - name: Export warm-up metrics
        shell: pwsh
        continue-on-error: true
        env:
          PYTHON_EXE: python
        run: |
          Write-Host "================================================"
          Write-Host "EXPORTING WARM-UP METRICS"
          Write-Host "================================================"
          & $env:PYTHON_EXE -m tools.soak.export_warmup_metrics `
            --path "artifacts/soak/latest" `
            --output "artifacts/soak/latest/reports/analysis/warmup_metrics.prom"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Metrics export returned exit code $LASTEXITCODE (non-blocking)"
          } else {
            Write-Host "✓ Warm-up metrics exported"
            if (Test-Path "artifacts/soak/latest/reports/analysis/warmup_metrics.prom") {
              Write-Host ""
              Write-Host "Preview (first 20 lines):"
              Get-Content "artifacts/soak/latest/reports/analysis/warmup_metrics.prom" -Head 20
            }
          }
          Write-Host "================================================"

      - name: Upload soak artifacts
        uses: actions/upload-artifact@v4
        with:
          name: soak-24-latest
          path: artifacts/soak/latest
          if-no-files-found: warn

