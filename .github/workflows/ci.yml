name: CI (fast)

on:
  push:
  pull_request:

jobs:
  # ===========================================================================
  # UNIT TESTS: Fast, low memory (~2-3 min)
  # ===========================================================================
  tests-unit:
    name: Unit Tests (fast)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONPATH: "${{ github.workspace }}"
      # Test credentials for CI environment (not real keys)
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
      STORAGE_PG_PASSWORD: "test_pg_password_for_ci_only"

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true  # Enable Git LFS support if needed
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          echo "=== Filtering requirements.txt ==="
          
          # Filter out private/local packages (case-insensitive, flexible matching)
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {print "  [FILTERED] " $0; next}
            /^[[:space:]]*mm-orderbook/ {print "  [FILTERED] " $0; next}
            /^[[:space:]]*mm_orderbook/ {print "  [FILTERED] " $0; next}
            /^[[:space:]]*git\+ssh:/ {print "  [FILTERED] " $0; next}
            /^[[:space:]]*git\+https:/ {print "  [FILTERED] " $0; next}
            {print}
          ' requirements.txt > requirements_ci.txt
          
          # Add CI-specific overrides
          echo "pydantic>=2,<3"           >> requirements_ci.txt
          echo "pydantic-settings>=2,<3"  >> requirements_ci.txt
          echo "pandas>=2,<3"             >> requirements_ci.txt
          
          echo ""
          echo "=== Generated requirements_ci.txt ==="
          cat requirements_ci.txt
          
          echo ""
          echo "=== GATE: Verify mm-orderbook not in requirements_ci.txt ==="
          if grep -i "mm.orderbook\|mm_orderbook" requirements_ci.txt; then
            echo "❌ GATE FAILED: mm-orderbook found in requirements_ci.txt"
            echo "This should never happen - check AWK filter logic"
            exit 1
          fi
          echo "✓ GATE PASSED: mm-orderbook correctly filtered out"

      - name: Install base dependencies
        run: |
          python -m pip install -U pip
          pip install maturin
          echo "✓ pip and maturin installed"

      - name: Install project with Rust module (editable)
        run: |
          echo "=== Building and installing mm-bot with Rust extensions ==="
          pip install -e . -v
          echo ""
          echo "=== Smoke test: import mm_orderbook ==="
          python -c "import mm_orderbook; print('✓ mm_orderbook import OK')"

      - name: Install remaining dependencies
        run: |
          echo "=== Installing external dependencies from requirements_ci.txt ==="
          pip install -r requirements_ci.txt
          echo ""
          echo "=== Final package list ==="
          pip list

      - name: "[DEBUG] Environment and File Structure"
        run: |
          echo "=============================================="
          echo "CI DIAGNOSTIC INFORMATION"
          echo "=============================================="
          echo ""
          echo "--- Current Working Directory ---"
          pwd
          echo ""
          echo "--- Directory Structure (tests/) ---"
          ls -la tests/ || echo "tests/ not found"
          echo ""
          echo "--- tests/fixtures/ Contents ---"
          ls -la tests/fixtures/ || echo "tests/fixtures/ not found"
          echo ""
          echo "--- tests/golden/ Contents ---"
          ls -la tests/golden/ || echo "tests/golden/ not found"
          echo ""
          echo "--- Specific File Checks ---"
          echo "tests/fixtures/audit/chain_ok.jsonl:"
          ls -la tests/fixtures/audit/chain_ok.jsonl || echo "  NOT FOUND"
          echo "tests/golden/EDGE_REPORT_case1.json:"
          ls -la tests/golden/EDGE_REPORT_case1.json || echo "  NOT FOUND"
          echo ""
          echo "--- File Counts ---"
          echo "tests/fixtures/ files: $(find tests/fixtures/ -type f 2>/dev/null | wc -l)"
          echo "tests/golden/ files: $(find tests/golden/ -type f 2>/dev/null | wc -l)"
          echo ""
          echo "--- Python Environment ---"
          python --version
          which python
          echo "PYTHONPATH: $PYTHONPATH"
          echo ""
          echo "=============================================="

      - name: "[DEBUG] Run Single Failing Test"
        continue-on-error: true
        run: |
          echo "=============================================="
          echo "SINGLE TEST DIAGNOSTIC"
          echo "=============================================="
          echo "Running: tests/test_finops_exporter_unit.py"
          python -m pytest tests/test_finops_exporter_unit.py -v --tb=short
          echo "=============================================="

      - name: Run Unit Tests
        # Unit tests: Fast, low memory, use -n 2 for speed
        run: |
          python tools/ci/run_selected_unit.py

  # ===========================================================================
  # E2E TESTS: Slower, higher memory (~20-30 min)
  # ===========================================================================
  tests-e2e:
    name: E2E Tests (integration)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONPATH: "${{ github.workspace }}"
      # Test credentials for CI environment (not real keys)
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
      STORAGE_PG_PASSWORD: "test_pg_password_for_ci_only"

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true  # Enable Git LFS support if needed
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: "[DEBUG] Verify fixtures after checkout"
        run: |
          echo "=============================================="
          echo "DIAGNOSTIC: Verifying test fixtures exist"
          echo "=============================================="
          
          if [ -d "tests/fixtures/digest/" ]; then
            echo "✓ tests/fixtures/digest/ directory exists"
            echo ""
            echo "=== Directory contents ==="
            ls -lh tests/fixtures/digest/
            echo ""
            echo "=== Critical fixtures check ==="
            for f in EDGE_SENTINEL.json DRIFT_STOP.json REG_GUARD_STOP.json; do
              if [ -f "tests/fixtures/digest/$f" ]; then
                size=$(wc -c < "tests/fixtures/digest/$f")
                echo "✓ $f exists ($size bytes)"
                head -c 100 "tests/fixtures/digest/$f"
                echo "..."
              else
                echo "✗ $f MISSING!"
              fi
            done
          else
            echo "✗ ERROR: tests/fixtures/digest/ directory not found!"
            echo "This means git checkout failed to get fixture files."
          fi
          echo "=============================================="
      
      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          echo "=== Filtering requirements.txt ==="
          
          # Filter out private/local packages (case-insensitive, flexible matching)
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {print "  [FILTERED] " $0; next}
            /^[[:space:]]*mm-orderbook/ {print "  [FILTERED] " $0; next}
            /^[[:space:]]*mm_orderbook/ {print "  [FILTERED] " $0; next}
            /^[[:space:]]*git\+ssh:/ {print "  [FILTERED] " $0; next}
            /^[[:space:]]*git\+https:/ {print "  [FILTERED] " $0; next}
            {print}
          ' requirements.txt > requirements_ci.txt
          
          # Add CI-specific overrides
          echo "pydantic>=2,<3"           >> requirements_ci.txt
          echo "pydantic-settings>=2,<3"  >> requirements_ci.txt
          echo "pandas>=2,<3"             >> requirements_ci.txt
          
          echo ""
          echo "=== Generated requirements_ci.txt ==="
          cat requirements_ci.txt
          
          echo ""
          echo "=== GATE: Verify mm-orderbook not in requirements_ci.txt ==="
          if grep -i "mm.orderbook\|mm_orderbook" requirements_ci.txt; then
            echo "❌ GATE FAILED: mm-orderbook found in requirements_ci.txt"
            echo "This should never happen - check AWK filter logic"
            exit 1
          fi
          echo "✓ GATE PASSED: mm-orderbook correctly filtered out"

      - name: Install base dependencies
        run: |
          python -m pip install -U pip
          pip install maturin
          echo "✓ pip and maturin installed"

      - name: Install project with Rust module (editable)
        run: |
          echo "=== Building and installing mm-bot with Rust extensions ==="
          pip install -e . -v
          echo ""
          echo "=== Smoke test: import mm_orderbook ==="
          python -c "import mm_orderbook; print('✓ mm_orderbook import OK')"

      - name: Install remaining dependencies
        run: |
          echo "=== Installing external dependencies from requirements_ci.txt ==="
          pip install -r requirements_ci.txt
          echo ""
          echo "=== Final package list ==="
          pip list

      - name: "[DEBUG] Environment and File Structure"
        run: |
          echo "=============================================="
          echo "CI DIAGNOSTIC INFORMATION"
          echo "=============================================="
          echo ""
          echo "--- Current Working Directory ---"
          pwd
          echo ""
          echo "--- Directory Structure (tests/) ---"
          ls -la tests/ || echo "tests/ not found"
          echo ""
          echo "--- tests/fixtures/ Contents ---"
          ls -la tests/fixtures/ || echo "tests/fixtures/ not found"
          echo ""
          echo "--- tests/golden/ Contents ---"
          ls -la tests/golden/ || echo "tests/golden/ not found"
          echo ""
          echo "--- Specific File Checks ---"
          echo "tests/fixtures/audit/chain_ok.jsonl:"
          ls -la tests/fixtures/audit/chain_ok.jsonl || echo "  NOT FOUND"
          echo "tests/golden/EDGE_REPORT_case1.json:"
          ls -la tests/golden/EDGE_REPORT_case1.json || echo "  NOT FOUND"
          echo ""
          echo "--- File Counts ---"
          echo "tests/fixtures/ files: $(find tests/fixtures/ -type f 2>/dev/null | wc -l)"
          echo "tests/golden/ files: $(find tests/golden/ -type f 2>/dev/null | wc -l)"
          echo ""
          echo "--- Python Environment ---"
          python --version
          which python
          echo "PYTHONPATH: $PYTHONPATH"
          echo ""
          echo "=============================================="

      - name: "[DEBUG] Run Single Failing Test"
        continue-on-error: true
        run: |
          echo "=============================================="
          echo "SINGLE TEST DIAGNOSTIC"
          echo "=============================================="
          echo "Running: tests/test_finops_exporter_unit.py"
          python -m pytest tests/test_finops_exporter_unit.py -v --tb=short
          echo "=============================================="

      - name: Run E2E Tests
        # E2E tests: Sequential mode (-n 0) to prevent OOM
        # These tests use heavy fixtures, run them one at a time
        run: |
          python tools/ci/run_selected_e2e.py
      
      - name: "[DEBUG] Re-run failing test_weekly_rollup_e2e with diagnostics"
        if: failure()
        continue-on-error: true
        run: |
          echo "=============================================="
          echo "DIAGNOSTIC: Re-running test_weekly_rollup_e2e.py"
          echo "=============================================="
          
          # Run the test and capture output to a file
          python -m pytest tests/e2e/test_weekly_rollup_e2e.py -xvs --tb=short 2>&1 | tee /tmp/weekly_rollup_debug.log
          
          echo ""
          echo "=== Checking for generated files ==="
          # Find the most recent test directory
          TEST_DIR=$(find /tmp/pytest-of-$(whoami) -type d -name "test_weekly_rollup_e2e*" -printf "%T@ %p\n" 2>/dev/null | sort -rn | head -1 | cut -d' ' -f2-)
          
          if [ -n "$TEST_DIR" ] && [ -d "$TEST_DIR" ]; then
            echo "Found test directory: $TEST_DIR"
            echo ""
            
            if [ -f "$TEST_DIR/WEEKLY_ROLLUP.json" ]; then
              echo "=== Generated WEEKLY_ROLLUP.json ==="
              cat "$TEST_DIR/WEEKLY_ROLLUP.json"
              echo ""
              echo "=== Expected WEEKLY_ROLLUP_case1.json ==="
              cat tests/golden/WEEKLY_ROLLUP_case1.json
              echo ""
              echo "=== DIFF (expected vs generated) ==="
              diff -u tests/golden/WEEKLY_ROLLUP_case1.json "$TEST_DIR/WEEKLY_ROLLUP.json" || true
              echo ""
              echo "=== HEX DUMP comparison (first 500 bytes) ==="
              echo "Generated:"
              head -c 500 "$TEST_DIR/WEEKLY_ROLLUP.json" | od -A x -t x1z -v | head -20
              echo "Golden:"
              head -c 500 tests/golden/WEEKLY_ROLLUP_case1.json | od -A x -t x1z -v | head -20
            else
              echo "ERROR: WEEKLY_ROLLUP.json not found in $TEST_DIR"
              echo "Directory contents:"
              ls -la "$TEST_DIR"
            fi
          else
            echo "ERROR: Could not find test directory"
            echo "Available pytest directories:"
            ls -la /tmp/pytest-of-$(whoami)/ 2>/dev/null || echo "No pytest directories found"
          fi
          
          echo "=============================================="
