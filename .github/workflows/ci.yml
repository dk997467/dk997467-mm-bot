name: CI (fast)

on:
  push:
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  # ===========================================================================
  # UNIT TESTS: Fast, low memory (~2-3 min)
  # ===========================================================================
  tests-unit:
    name: Unit Tests (fast)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONPATH: "${{ github.workspace }}"
      # Test credentials for CI environment (not real keys)
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
      STORAGE_PG_PASSWORD: "test_pg_password_for_ci_only"

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true  # Enable Git LFS support if needed
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          echo "=== Filtering requirements.txt ==="
          
          # Filter out private/local packages (case-insensitive, flexible matching)
          # Log filtered lines to stderr, only pass through clean dependencies to stdout
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*mm-orderbook/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*mm_orderbook/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*git\+ssh:/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*git\+https:/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            {print}
          ' requirements.txt > requirements_ci.txt
          
          # Add CI-specific overrides
          echo "pydantic>=2,<3"           >> requirements_ci.txt
          echo "pydantic-settings>=2,<3"  >> requirements_ci.txt
          echo "pandas>=2,<3"             >> requirements_ci.txt
          
          echo ""
          echo "=== Generated requirements_ci.txt ==="
          cat requirements_ci.txt
          
          echo ""
          echo "=== GATE: Verify mm-orderbook not in requirements_ci.txt ==="
          if grep -i "mm.orderbook\|mm_orderbook" requirements_ci.txt; then
            echo "❌ GATE FAILED: mm-orderbook found in requirements_ci.txt"
            echo "This should never happen - check AWK filter logic"
            exit 1
          fi
          echo "✓ GATE PASSED: mm-orderbook correctly filtered out"

      - name: Install base dependencies
        run: |
          python -m pip install -U pip
          pip install maturin
          echo "✓ pip and maturin installed"

      - name: Install project with Rust module (editable)
        run: |
          echo "=== Building and installing mm-bot with Rust extensions ==="
          pip install -e . -v
          echo ""
          echo "=== Smoke test: import mm_orderbook ==="
          python -c "import mm_orderbook; print('✓ mm_orderbook import OK')"

      - name: Install remaining dependencies
        run: |
          echo "=== Installing external dependencies from requirements_ci.txt ==="
          pip install -r requirements_ci.txt
          echo ""
          echo "=== Final package list ==="
          pip list

      - name: "[DEBUG] Environment and File Structure"
        run: |
          echo "=============================================="
          echo "CI DIAGNOSTIC INFORMATION"
          echo "=============================================="
          echo ""
          echo "--- Current Working Directory ---"
          pwd
          echo ""
          echo "--- Directory Structure (tests/) ---"
          ls -la tests/ || echo "tests/ not found"
          echo ""
          echo "--- tests/fixtures/ Contents ---"
          ls -la tests/fixtures/ || echo "tests/fixtures/ not found"
          echo ""
          echo "--- tests/golden/ Contents ---"
          ls -la tests/golden/ || echo "tests/golden/ not found"
          echo ""
          echo "--- Specific File Checks ---"
          echo "tests/fixtures/audit/chain_ok.jsonl:"
          ls -la tests/fixtures/audit/chain_ok.jsonl || echo "  NOT FOUND"
          echo "tests/golden/EDGE_REPORT_case1.json:"
          ls -la tests/golden/EDGE_REPORT_case1.json || echo "  NOT FOUND"
          echo ""
          echo "--- File Counts ---"
          echo "tests/fixtures/ files: $(find tests/fixtures/ -type f 2>/dev/null | wc -l)"
          echo "tests/golden/ files: $(find tests/golden/ -type f 2>/dev/null | wc -l)"
          echo ""
          echo "--- Python Environment ---"
          python --version
          which python
          echo "PYTHONPATH: $PYTHONPATH"
          echo ""
          echo "=============================================="

      - name: "[DEBUG] Run Single Failing Test"
        continue-on-error: true
        run: |
          echo "=============================================="
          echo "SINGLE TEST DIAGNOSTIC"
          echo "=============================================="
          echo "Running: tests/test_finops_exporter_unit.py"
          python -m pytest tests/test_finops_exporter_unit.py -v --tb=short
          echo "=============================================="

      - name: Run Unit Tests
        # Unit tests: Fast, low memory, use -n 2 for speed
        run: |
          python tools/ci/run_selected_unit.py

  # ===========================================================================
  # SMOKE TESTS: Fast soak validation (<2 min)
  # ===========================================================================
  tests-smoke:
    name: Smoke Tests (soak)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONPATH: "${{ github.workspace }}"
      SOAK_SLEEP_SECONDS: "5"
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
      STORAGE_PG_PASSWORD: "test_pg_password_for_ci_only"

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          echo "=== Filtering requirements.txt ==="
          
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*mm-orderbook/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*mm_orderbook/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*git\+ssh:/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*git\+https:/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            {print}
          ' requirements.txt > requirements_ci.txt
          
          echo "pydantic>=2,<3"           >> requirements_ci.txt
          echo "pydantic-settings>=2,<3"  >> requirements_ci.txt
          echo "pandas>=2,<3"             >> requirements_ci.txt
          
          echo ""
          echo "=== GATE: Verify mm-orderbook not in requirements_ci.txt ==="
          if grep -i "mm.orderbook\|mm_orderbook" requirements_ci.txt; then
            echo "❌ GATE FAILED: mm-orderbook found in requirements_ci.txt"
            exit 1
          fi
          echo "✓ GATE PASSED: mm-orderbook correctly filtered out"

      - name: Install base dependencies
        run: |
          python -m pip install -U pip
          pip install maturin
          echo "✓ pip and maturin installed"

      - name: Install project with Rust module (editable)
        run: |
          echo "=== Building and installing mm-bot with Rust extensions ==="
          pip install -e . -v
          echo ""
          echo "=== Smoke test: import mm_orderbook ==="
          python -c "import mm_orderbook; print('✓ mm_orderbook import OK')"

      - name: Install remaining dependencies
        run: |
          echo "=== Installing external dependencies from requirements_ci.txt ==="
          pip install -r requirements_ci.txt
          echo ""
          echo "=== Final package list ==="
          pip list

      - name: Run Smoke Tests (<2 min)
        run: |
          echo "================================================"
          echo "SOAK SMOKE TESTS (fast validation)"
          echo "================================================"
          SOAK_SLEEP_SECONDS=5 pytest -v tests/smoke/test_soak_smoke.py -k smoke
          echo "================================================"
      
      - name: Upload smoke artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-artifacts
          path: |
            artifacts/soak/**
            .pytest_cache/**
          if-no-files-found: ignore
          retention-days: 7
      
      - name: Run Config Precedence Integration Test (<1 min)
        run: |
          echo "================================================"
          echo "CONFIG PRECEDENCE INTEGRATION TEST"
          echo "================================================"
          SOAK_SLEEP_SECONDS=1 USE_MOCK=1 pytest -v tests/integration/test_config_precedence_integration.py -k config_precedence
          echo "================================================"

  # ===========================================================================
  # POST-SOAK ANALYSIS: KPI validation & delta verification (~5 min)
  # ===========================================================================
  post-soak-analyze:
    name: Post-Soak Analysis (8 iters)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONPATH: "${{ github.workspace }}"
      SOAK_SLEEP_SECONDS: "5"
      USE_MOCK: "1"
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
      STORAGE_PG_PASSWORD: "test_pg_password_for_ci_only"

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          echo "=== Filtering requirements.txt ==="
          
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*mm-orderbook/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*mm_orderbook/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*git\+ssh:/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*git\+https:/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            {print}
          ' requirements.txt > requirements_ci.txt
          
          echo "pydantic>=2,<3"           >> requirements_ci.txt
          echo "pydantic-settings>=2,<3"  >> requirements_ci.txt
          echo "pandas>=2,<3"             >> requirements_ci.txt
          
          echo ""
          echo "=== GATE: Verify mm-orderbook not in requirements_ci.txt ==="
          if grep -i "mm.orderbook\|mm_orderbook" requirements_ci.txt; then
            echo "❌ GATE FAILED: mm-orderbook found in requirements_ci.txt"
            exit 1
          fi
          echo "✓ GATE PASSED: mm-orderbook correctly filtered out"

      - name: Install base dependencies
        run: |
          python -m pip install -U pip
          pip install maturin
          echo "✓ pip and maturin installed"

      - name: Install project with Rust module (editable)
        run: |
          echo "=== Building and installing mm-bot with Rust extensions ==="
          pip install -e . -v
          echo ""
          echo "=== Smoke test: import mm_orderbook ==="
          python -c "import mm_orderbook; print('✓ mm_orderbook import OK')"

      - name: Install remaining dependencies
        run: |
          echo "=== Installing external dependencies from requirements_ci.txt ==="
          pip install -r requirements_ci.txt
          echo ""
          echo "=== Final package list ==="
          pip list

      - name: Run 8-iteration soak with auto-tuning
        run: |
          echo "================================================"
          echo "POST-SOAK ANALYSIS: 8 iterations"
          echo "================================================"
          
          rm -rf artifacts/soak/latest
          
          python -m tools.soak.run \
            --iterations 8 \
            --mock \
            --auto-tune
          
          if [ $? -ne 0 ]; then
            echo "❌ Soak run failed"
            exit 1
          fi
          
          echo "✓ Soak run completed"
          echo "================================================"

      - name: Verify delta application
        id: verify-deltas
        shell: bash
        run: |
          echo "================================================"
          echo "DELTA VERIFICATION"
          echo "================================================"
          
          mkdir -p artifacts/soak/latest/reports/analysis
          
          python -m tools.soak.verify_deltas_applied \
            --path artifacts/soak/latest/soak/latest \
            --strict \
            --json \
            > artifacts/soak/latest/reports/analysis/DELTA_VERIFY_REPORT.json
          
          EXIT_CODE=$?
          
          # Extract full_apply_ratio using heredoc
          FULL_APPLY_RATIO=$(python - <<'PY' 2>/dev/null || echo "0.0"
          import json
          from pathlib import Path
          p = Path('artifacts/soak/latest/reports/analysis/DELTA_VERIFY_REPORT.json')
          if p.exists():
              data = json.loads(p.read_text())
              print(data.get('full_apply_ratio', 0.0))
          else:
              print(0.0)
          PY
          )
          
          echo "full_apply_ratio=$FULL_APPLY_RATIO" >> $GITHUB_OUTPUT
          
          if [ "$EXIT_CODE" -ne 0 ]; then
            echo "❌ Delta verification failed"
            exit 1
          fi
          
          echo "✓ Delta verification passed (ratio: $FULL_APPLY_RATIO)"
          echo "================================================"

      - name: Generate analysis reports
        run: |
          echo "================================================"
          echo "GENERATING REPORTS"
          echo "================================================"
          
          python -m tools.soak.build_reports \
            --src artifacts/soak/latest \
            --out artifacts/soak/latest/reports/analysis \
            --last-n 8
          
          if [ $? -ne 0 ]; then
            echo "❌ Report generation failed"
            exit 1
          fi
          
          echo "✓ Reports generated"
          echo "================================================"

      - name: Check KPI thresholds
        shell: bash
        run: |
          echo "================================================"
          echo "KPI THRESHOLD VALIDATION"
          echo "================================================"
          
          python - <<'PY'
          import json
          import sys
          from pathlib import Path
          
          snap = Path("artifacts/soak/latest/reports/analysis/POST_SOAK_SNAPSHOT.json")
          ver  = Path("artifacts/soak/latest/reports/analysis/DELTA_VERIFY_REPORT.json")
          
          try:
              s = json.loads(snap.read_text())
              v = json.loads(ver.read_text()) if ver.exists() else {}
          except Exception as e:
              print(f"ERR: cannot read analysis JSON: {e}")
              sys.exit(2)
          
          kpi = s.get('kpi_last_n', {})
          goals = s.get('goals_met', {})
          
          print('KPI Results:')
          print(f'  Maker/Taker: {kpi.get("maker_taker_ratio", {}).get("mean", 0):.3f} (target >= 0.83)')
          print(f'  P95 Latency: {kpi.get("p95_latency_ms", {}).get("max", 999):.0f}ms (target <= 340ms)')
          print(f'  Risk Ratio: {kpi.get("risk_ratio", {}).get("median", 1):.3f} (target <= 0.40)')
          print(f'  Net BPS: {kpi.get("net_bps", {}).get("mean", 0):.2f} (target >= 2.5)')
          print()
          
          failed = []
          for goal_name, goal_met in goals.items():
              status = '✓' if goal_met else '✗'
              print(f'{status} {goal_name}: {goal_met}')
              if not goal_met:
                  failed.append(goal_name)
          
          if failed:
              print()
              print(f'❌ KPI GATE FAILED: {len(failed)} goal(s) not met')
              print(f'   Failed: {", ".join(failed)}')
              sys.exit(1)
          else:
              print()
              print('✓ All KPI goals met')
          PY
          
          echo "================================================"
          echo "✓ KPI validation passed"
          echo "================================================"

      - name: Upload soak artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: post-soak-analysis-${{ github.run_id }}
          path: |
            artifacts/soak/latest/reports/
            artifacts/soak/latest/soak/latest/TUNING_REPORT.json
            artifacts/soak/latest/soak/latest/ITER_SUMMARY_*.json
          if-no-files-found: warn
          retention-days: 30

  # ===========================================================================
  # E2E TESTS: Slower, higher memory (~20-30 min)
  # ===========================================================================
  tests-e2e:
    name: E2E Tests (integration)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONPATH: "${{ github.workspace }}"
      # Test credentials for CI environment (not real keys)
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
      STORAGE_PG_PASSWORD: "test_pg_password_for_ci_only"

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true  # Enable Git LFS support if needed
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: "[DEBUG] Verify fixtures after checkout"
        run: |
          echo "=============================================="
          echo "DIAGNOSTIC: Verifying test fixtures exist"
          echo "=============================================="
          
          if [ -d "tests/fixtures/digest/" ]; then
            echo "✓ tests/fixtures/digest/ directory exists"
            echo ""
            echo "=== Directory contents ==="
            ls -lh tests/fixtures/digest/
            echo ""
            echo "=== Critical fixtures check ==="
            for f in EDGE_SENTINEL.json DRIFT_STOP.json REG_GUARD_STOP.json; do
              if [ -f "tests/fixtures/digest/$f" ]; then
                size=$(wc -c < "tests/fixtures/digest/$f")
                echo "✓ $f exists ($size bytes)"
                head -c 100 "tests/fixtures/digest/$f"
                echo "..."
              else
                echo "✗ $f MISSING!"
              fi
            done
          else
            echo "✗ ERROR: tests/fixtures/digest/ directory not found!"
            echo "This means git checkout failed to get fixture files."
          fi
          echo "=============================================="
      
      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          echo "=== Filtering requirements.txt ==="
          
          # Filter out private/local packages (case-insensitive, flexible matching)
          # Log filtered lines to stderr, only pass through clean dependencies to stdout
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*mm-orderbook/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*mm_orderbook/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*git\+ssh:/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            /^[[:space:]]*git\+https:/ {print "  [FILTERED] " $0 > "/dev/stderr"; next}
            {print}
          ' requirements.txt > requirements_ci.txt
          
          # Add CI-specific overrides
          echo "pydantic>=2,<3"           >> requirements_ci.txt
          echo "pydantic-settings>=2,<3"  >> requirements_ci.txt
          echo "pandas>=2,<3"             >> requirements_ci.txt
          
          echo ""
          echo "=== Generated requirements_ci.txt ==="
          cat requirements_ci.txt
          
          echo ""
          echo "=== GATE: Verify mm-orderbook not in requirements_ci.txt ==="
          if grep -i "mm.orderbook\|mm_orderbook" requirements_ci.txt; then
            echo "❌ GATE FAILED: mm-orderbook found in requirements_ci.txt"
            echo "This should never happen - check AWK filter logic"
            exit 1
          fi
          echo "✓ GATE PASSED: mm-orderbook correctly filtered out"

      - name: Install base dependencies
        run: |
          python -m pip install -U pip
          pip install maturin
          echo "✓ pip and maturin installed"

      - name: Install project with Rust module (editable)
        run: |
          echo "=== Building and installing mm-bot with Rust extensions ==="
          pip install -e . -v
          echo ""
          echo "=== Smoke test: import mm_orderbook ==="
          python -c "import mm_orderbook; print('✓ mm_orderbook import OK')"

      - name: Install remaining dependencies
        run: |
          echo "=== Installing external dependencies from requirements_ci.txt ==="
          pip install -r requirements_ci.txt
          echo ""
          echo "=== Final package list ==="
          pip list

      - name: "[DEBUG] Environment and File Structure"
        run: |
          echo "=============================================="
          echo "CI DIAGNOSTIC INFORMATION"
          echo "=============================================="
          echo ""
          echo "--- Current Working Directory ---"
          pwd
          echo ""
          echo "--- Directory Structure (tests/) ---"
          ls -la tests/ || echo "tests/ not found"
          echo ""
          echo "--- tests/fixtures/ Contents ---"
          ls -la tests/fixtures/ || echo "tests/fixtures/ not found"
          echo ""
          echo "--- tests/golden/ Contents ---"
          ls -la tests/golden/ || echo "tests/golden/ not found"
          echo ""
          echo "--- Specific File Checks ---"
          echo "tests/fixtures/audit/chain_ok.jsonl:"
          ls -la tests/fixtures/audit/chain_ok.jsonl || echo "  NOT FOUND"
          echo "tests/golden/EDGE_REPORT_case1.json:"
          ls -la tests/golden/EDGE_REPORT_case1.json || echo "  NOT FOUND"
          echo ""
          echo "--- File Counts ---"
          echo "tests/fixtures/ files: $(find tests/fixtures/ -type f 2>/dev/null | wc -l)"
          echo "tests/golden/ files: $(find tests/golden/ -type f 2>/dev/null | wc -l)"
          echo ""
          echo "--- Python Environment ---"
          python --version
          which python
          echo "PYTHONPATH: $PYTHONPATH"
          echo ""
          echo "=============================================="

      - name: "[DEBUG] Run Single Failing Test"
        continue-on-error: true
        run: |
          echo "=============================================="
          echo "SINGLE TEST DIAGNOSTIC"
          echo "=============================================="
          echo "Running: tests/test_finops_exporter_unit.py"
          python -m pytest tests/test_finops_exporter_unit.py -v --tb=short
          echo "=============================================="

      - name: Run E2E Tests
        # E2E tests: Sequential mode (-n 0) to prevent OOM
        # These tests use heavy fixtures, run them one at a time
        run: |
          python tools/ci/run_selected_e2e.py
      
      - name: "[DEBUG] Re-run failing test_weekly_rollup_e2e with diagnostics"
        if: failure()
        continue-on-error: true
        run: |
          echo "=============================================="
          echo "DIAGNOSTIC: Re-running test_weekly_rollup_e2e.py"
          echo "=============================================="
          
          # Run the test and capture output to a file
          python -m pytest tests/e2e/test_weekly_rollup_e2e.py -xvs --tb=short 2>&1 | tee /tmp/weekly_rollup_debug.log
          
          echo ""
          echo "=== Checking for generated files ==="
          # Find the most recent test directory
          TEST_DIR=$(find /tmp/pytest-of-$(whoami) -type d -name "test_weekly_rollup_e2e*" -printf "%T@ %p\n" 2>/dev/null | sort -rn | head -1 | cut -d' ' -f2-)
          
          if [ -n "$TEST_DIR" ] && [ -d "$TEST_DIR" ]; then
            echo "Found test directory: $TEST_DIR"
            echo ""
            
            if [ -f "$TEST_DIR/WEEKLY_ROLLUP.json" ]; then
              echo "=== Generated WEEKLY_ROLLUP.json ==="
              cat "$TEST_DIR/WEEKLY_ROLLUP.json"
              echo ""
              echo "=== Expected WEEKLY_ROLLUP_case1.json ==="
              cat tests/golden/WEEKLY_ROLLUP_case1.json
              echo ""
              echo "=== DIFF (expected vs generated) ==="
              diff -u tests/golden/WEEKLY_ROLLUP_case1.json "$TEST_DIR/WEEKLY_ROLLUP.json" || true
              echo ""
              echo "=== HEX DUMP comparison (first 500 bytes) ==="
              echo "Generated:"
              head -c 500 "$TEST_DIR/WEEKLY_ROLLUP.json" | od -A x -t x1z -v | head -20
              echo "Golden:"
              head -c 500 tests/golden/WEEKLY_ROLLUP_case1.json | od -A x -t x1z -v | head -20
            else
              echo "ERROR: WEEKLY_ROLLUP.json not found in $TEST_DIR"
              echo "Directory contents:"
              ls -la "$TEST_DIR"
            fi
          else
            echo "ERROR: Could not find test directory"
            echo "Available pytest directories:"
            ls -la /tmp/pytest-of-$(whoami)/ 2>/dev/null || echo "No pytest directories found"
          fi
          
          echo "=============================================="
