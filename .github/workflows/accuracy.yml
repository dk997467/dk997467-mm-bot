name: Accuracy Gate (Shadow ‚Üî Dry-Run)

on:
  pull_request:
    paths:
      - 'tools/shadow/**'
      - 'tools/dryrun/**'
      - 'tools/accuracy/**'
      - '.github/workflows/accuracy.yml'
  workflow_dispatch:
    inputs:
      min_windows:
        description: 'Minimum windows required'
        required: false
        default: '24'
        type: string
      mape_threshold:
        description: 'MAPE threshold (0.15 = 15%)'
        required: false
        default: '0.15'
        type: string
      sanity_mode:
        description: 'Run sanity check only (edge cases + formatting)'
        required: false
        default: false
        type: boolean

concurrency:
  group: accuracy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  accuracy-gate:
    name: Accuracy Comparison
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONPATH: "${{ github.workspace }}"
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
      STORAGE_PG_PASSWORD: "test_pg_password_for_ci_only"
      MAX_SYMBOLS_IN_PR: "10"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      # Guard against deprecated artifact actions
      - name: Lint - forbid artifact v3
        shell: bash
        run: |
          set -euo pipefail
          if git grep -nE 'actions/(upload|download)-artifact\s*[@:]\s*v3(\b|[^0-9])' .github | tee /dev/stderr; then
            echo "::error::Found deprecated artifact actions v3 ‚Äî must use @v4"
            exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {next}
            /^[[:space:]]*mm-orderbook/ {next}
            /^[[:space:]]*mm_orderbook/ {next}
            /^[[:space:]]*git\+/ {next}
            {print}
          ' requirements.txt > requirements_ci.txt
          echo "pydantic>=2,<3" >> requirements_ci.txt
          echo "pydantic-settings>=2,<3" >> requirements_ci.txt
          echo "pandas>=2,<3" >> requirements_ci.txt

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install -U pip
          pip install maturin
          pip install -e . -v
          pip install -r requirements_ci.txt

      - name: Run Shadow Mode (mock, 24 iterations)
        id: run_shadow_baseline
        shell: bash
        run: |
          echo "================================================"
          echo "SHADOW MODE: 24 iterations for accuracy baseline"
          echo "================================================"
          mkdir -p artifacts/shadow/latest
          python -m tools.shadow.run_shadow \
            --iterations 24 \
            --duration 60 \
            --profile moderate \
            --exchange bybit \
            --source mock \
            --output artifacts/shadow/latest
          EXIT_CODE=$?
          echo "acc_exit_code=$EXIT_CODE" >> "$GITHUB_OUTPUT"
          if [ $EXIT_CODE -ne 0 ]; then
            echo "‚ùå Shadow run failed"
            exit 1
          fi
          echo "‚úì Shadow run completed"
          ls -lah artifacts/shadow/latest/ITER_SUMMARY_*.json | head -5

      - name: Run Dry-Run Mode (24 iterations)
        shell: bash
        run: |
          echo "================================================"
          echo "DRY-RUN MODE: 24 iterations for accuracy comparison"
          echo "================================================"
          mkdir -p artifacts/dryrun/latest
          python -m tools.dryrun.run_dryrun \
            --symbols BTCUSDT ETHUSDT \
            --iterations 24 \
            --duration 60 \
            --output artifacts/dryrun/latest
          if [ $? -ne 0 ]; then
            echo "‚ùå Dry-run failed"
            exit 1
          fi
          echo "‚úì Dry-run completed"
          ls -lah artifacts/dryrun/latest/ITER_SUMMARY_*.json | head -5

      - name: Run Accuracy Comparison
        if: ${{ github.event.inputs.sanity_mode != 'true' }}
        id: accuracy_compare
        continue-on-error: true
        shell: bash
        run: |
          echo "================================================"
          echo "ACCURACY GATE: Comparing Shadow vs Dry-Run"
          echo "================================================"
          MIN_WINDOWS="${{ github.event.inputs.min_windows || '24' }}"
          MAPE_THRESHOLD="${{ github.event.inputs.mape_threshold || '0.15' }}"
          python -m tools.accuracy.compare_shadow_dryrun \
            --shadow "artifacts/shadow/latest/ITER_SUMMARY_*.json" \
            --dryrun "artifacts/dryrun/latest/ITER_SUMMARY_*.json" \
            --symbols BTCUSDT,ETHUSDT \
            --min-windows "$MIN_WINDOWS" \
            --max-age-min 120 \
            --mape-threshold "$MAPE_THRESHOLD" \
            --median-delta-threshold-bps 1.5 \
            --out-dir reports/analysis \
            --verbose
          EXIT_CODE=$?
          echo "exit_code=$EXIT_CODE" >> "$GITHUB_OUTPUT"
          echo "Accuracy comparison exit code: $EXIT_CODE"

      - name: Run Sanity Check
        if: ${{ github.event.inputs.sanity_mode == 'true' }}
        id: sanity_check
        continue-on-error: true
        shell: bash
        run: |
          echo "================================================"
          echo "ACCURACY GATE: Sanity Check Mode"
          echo "================================================"
          MIN_WINDOWS="${{ github.event.inputs.min_windows || '24' }}"
          MAPE_THRESHOLD="${{ github.event.inputs.mape_threshold || '0.15' }}"
          python -m tools.accuracy.sanity_check \
            --shadow-glob "artifacts/shadow/latest/ITER_SUMMARY_*.json" \
            --dryrun-glob "artifacts/dryrun/latest/ITER_SUMMARY_*.json" \
            --min-windows "$MIN_WINDOWS" \
            --max-age-min 120 \
            --mape-threshold "$MAPE_THRESHOLD" \
            --median-delta-bps 1.5 \
            --report-dir reports/analysis \
            --verbose
          EXIT_CODE=$?
          echo "exit_code=$EXIT_CODE" >> "$GITHUB_OUTPUT"
          echo "Sanity check exit code: $EXIT_CODE"

      - name: Display Accuracy Report
        if: always()
        shell: bash
        run: |
          echo "================================================"
          echo "ACCURACY REPORT"
          echo "================================================"
          if [ -f reports/analysis/ACCURACY_REPORT.md ]; then
            cat reports/analysis/ACCURACY_REPORT.md
          else
            echo "‚ùå ACCURACY_REPORT.md not found"
          fi
          echo ""
          echo "================================================"
          echo "ACCURACY SUMMARY (JSON)"
          echo "================================================"
          if [ -f reports/analysis/ACCURACY_SUMMARY.json ]; then
            cat reports/analysis/ACCURACY_SUMMARY.json | jq .
          else
            echo "‚ùå ACCURACY_SUMMARY.json not found"
          fi
          if [ "${{ github.event.inputs.sanity_mode }}" = "true" ]; then
            echo ""
            echo "================================================"
            echo "SANITY CHECK REPORT"
            echo "================================================"
            if [ -f reports/analysis/ACCURACY_SANITY.md ]; then
              cat reports/analysis/ACCURACY_SANITY.md
            else
              echo "‚ùå ACCURACY_SANITY.md not found"
            fi
          fi

      - name: Upload Accuracy Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accuracy-gate-${{ github.run_id }}
          path: |
            reports/analysis/ACCURACY_*.md
            reports/analysis/ACCURACY_*.json
            reports/analysis/sanity_*/**
            artifacts/shadow/latest/ITER_SUMMARY_*.json
            artifacts/dryrun/latest/ITER_SUMMARY_*.json
          if-no-files-found: warn
          retention-days: 30

      - name: Comment Accuracy Results to PR
        if: always() && github.event_name == 'pull_request' && github.event.pull_request.number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const sanityMode = '${{ github.event.inputs.sanity_mode }}' === 'true';
            const runId = context.runId;
            const artifactsPage = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${runId}#artifacts`;
            let comment = '';

            if (sanityMode) {
              const p = 'reports/analysis/ACCURACY_SANITY.md';
              if (!fs.existsSync(p)) { return; }
              const t = fs.readFileSync(p, 'utf8');
              const verdictMatch = t.match(/\*\*Overall Verdict:\*\*\s*(.*)/);
              const verdict = verdictMatch ? verdictMatch[1].trim() : 'UNKNOWN';
              const badge = verdict.includes('PASS') ? '‚úÖ' : '‚ö†Ô∏è';
              comment = `### ${badge} Accuracy Gate: Sanity Check\n\n**Verdict:** ${verdict}\n\n**Artifacts:** [üì¶ Download](${artifactsPage})`;
            } else {
              const p = 'reports/analysis/ACCURACY_SUMMARY.json';
              if (!fs.existsSync(p)) { return; }
              const summary = JSON.parse(fs.readFileSync(p, 'utf8'));
              const verdict = summary.verdict || 'UNKNOWN';
              const badge = verdict === 'PASS' ? '‚úÖ' : (verdict === 'WARN' ? 'üü°' : 'üî¥');
              comment = `### ${badge} Accuracy Gate: ${verdict}\n\n**Artifacts:** [üì¶ Download](${artifactsPage})\n\n_Generated: ${summary.generated_at_utc || 'n/a'}_`;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });

      - name: Check Accuracy Gate Result
        if: always()
        id: accuracy_result
        shell: bash
        env:
          SANITY_MODE: ${{ github.event.inputs.sanity_mode || 'false' }}
          ACC_EXIT_CODE: ${{ steps.run_shadow_baseline.outputs.acc_exit_code || '1' }}
          CMP_EXIT_CODE: ${{ steps.accuracy_compare.outputs.exit_code || '1' }}
          SNT_EXIT_CODE: ${{ steps.sanity_check.outputs.exit_code || '0' }}
        run: |
          echo "================================================"
          echo "ACCURACY GATE RESULT"
          echo "================================================"
          SANITY="${SANITY_MODE:-false}"
          if [ "$SANITY" = "true" ]; then
            echo "Sanity exit: ${SNT_EXIT_CODE}"
            exit 0
          else
            # –∏—Ç–æ–≥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–µ—Ä—ë–º –∏–∑ —à–∞–≥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            EXIT="${CMP_EXIT_CODE:-1}"
            if [ "$EXIT" = "0" ]; then
              echo "‚úÖ Accuracy Gate PASSED"
              exit 0
            elif [ "$EXIT" = "2" ]; then
              echo "üü° Accuracy Gate WARN (soft thresholds)"
              exit 0
            else
              echo "üî¥ Accuracy Gate FAILED (exit=$EXIT)"
              echo "Review ACCURACY_REPORT.md for details"
              exit 1
            fi
          fi
