name: Continuous Soak

on:
  schedule:
    - cron: "0 * * * *"   # Every hour
  workflow_dispatch:
    inputs:
      interval_min:
        description: 'Interval minutes between cycles'
        required: false
        default: '60'
        type: string
      max_iterations:
        description: 'Max iterations (0=infinite, good for manual runs)'
        required: false
        default: '1'
        type: string
      env_name:
        description: 'Environment (dev/staging/prod)'
        required: false
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

concurrency:
  group: continuous-soak
  cancel-in-progress: false

jobs:
  soak-loop:
    name: Continuous Soak Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONPATH: "${{ github.workspace }}"
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
      STORAGE_PG_PASSWORD: "test_pg_password_for_ci_only"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {next}
            /^[[:space:]]*mm-orderbook/ {next}
            /^[[:space:]]*mm_orderbook/ {next}
            /^[[:space:]]*git\+/ {next}
            {print}
          ' requirements.txt > requirements_ci.txt
          
          echo "pydantic>=2,<3" >> requirements_ci.txt
          echo "pydantic-settings>=2,<3" >> requirements_ci.txt
          echo "pandas>=2,<3" >> requirements_ci.txt
          echo "requests>=2,<3" >> requirements_ci.txt

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install maturin
          pip install -e . -v
          pip install -r requirements_ci.txt

      - name: Create mock ITER_SUMMARY files for testing
        shell: bash
        run: |
          mkdir -p artifacts/soak/latest
          
          # Create 24 mock windows for testing
          for i in {1..24}; do
            cat > artifacts/soak/latest/ITER_SUMMARY_$(printf "%03d" $i).json <<EOF
          {
            "window_index": $i,
            "BTCUSDT": {
              "edge_bps": $(python3 -c "print(3.5 - $i * 0.01)"),
              "maker_taker_ratio": $(python3 -c "print(0.85 - $i * 0.001)"),
              "p95_latency_ms": $(python3 -c "print(250 + $i * 2)"),
              "risk_ratio": $(python3 -c "print(0.30 + $i * 0.005)")
            },
            "ETHUSDT": {
              "edge_bps": $(python3 -c "print(3.0 - $i * 0.008)"),
              "maker_taker_ratio": $(python3 -c "print(0.83 - $i * 0.0008)"),
              "p95_latency_ms": $(python3 -c "print(270 + $i * 3)"),
              "risk_ratio": $(python3 -c "print(0.32 + $i * 0.004)")
            },
            "meta": {
              "commit": "$(git rev-parse --short HEAD)",
              "profile": "test",
              "source": "ci"
            }
          }
          EOF
          done
          
          echo "Created $(ls artifacts/soak/latest/ITER_SUMMARY_*.json | wc -l) mock ITER files"

      - name: Run Continuous Soak (single cycle for CI)
        env:
          REDIS_URL: ${{ secrets.REDIS_URL_DEV || 'redis://localhost:6379/0' }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || '' }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID || '' }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
        run: |
          python -m tools.soak.continuous_runner \
            --iter-glob "artifacts/soak/latest/ITER_SUMMARY_*.json" \
            --min-windows 24 \
            --max-iterations ${{ github.event.inputs.max_iterations || '1' }} \
            --interval-min ${{ github.event.inputs.interval_min || '0' }} \
            --env ${{ github.event.inputs.env_name || 'dev' }} \
            --exchange bybit \
            --redis-url "${REDIS_URL}" \
            --ttl 1800 \
            --stream \
            --stream-maxlen 5000 \
            --dry-run \
            --verbose

      - name: Upload analysis artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: continuous-soak-analysis-${{ github.run_id }}
          path: |
            reports/analysis/**
          if-no-files-found: warn
          retention-days: 30
      
      - name: Comment to PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'reports/analysis/SOAK_SUMMARY.json';
            
            if (!fs.existsSync(path)) {
              core.info('SOAK_SUMMARY.json not found, skipping comment');
              return;
            }
            
            const sum = JSON.parse(fs.readFileSync(path, 'utf8'));
            const verdict = sum.overall?.verdict || 'N/A';
            const badge = verdict === 'OK' ? 'âœ…' : (verdict === 'WARN' ? 'ðŸŸ¡' : 'ðŸ”´');
            
            const body = `### ðŸ”„ Continuous Soak Analysis
            
            **Verdict:** ${badge} ${verdict}
            **Windows:** ${sum.windows || 0}
            **Symbols:** ${Object.keys(sum.symbols || {}).length}
            
            _This is an automated continuous analysis run._`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

