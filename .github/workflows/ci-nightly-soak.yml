name: Nightly Soak (24 iters, warmup)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Branch or tag to run on"
        required: true
        default: "main"
      iterations:
        description: "Number of iterations"
        required: true
        default: "24"
      warmup:
        description: "Enable warm-up"
        type: boolean
        default: true
      auto_tune:
        description: "Enable auto-tuning"
        type: boolean
        default: true
      sleep_seconds:
        description: "Sleep between iterations (seconds)"
        required: true
        default: "300"

jobs:
  soak:
    name: Soak Test (24 iters, warmup, strict gates)
    runs-on: ubuntu-latest
    timeout-minutes: 240
    concurrency:
      group: nightly-soak-${{ github.ref }}
      cancel-in-progress: false
    
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONPATH: "${{ github.workspace }}"
      SOAK_SLEEP_SECONDS: "${{ inputs.sleep_seconds }}"
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
      STORAGE_PG_PASSWORD: "test_pg_password_for_ci_only"

    steps:
      - name: Checkout ${{ inputs.ref }}
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          lfs: true
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
      
      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {next}
            /^[[:space:]]*mm-orderbook/ {next}
            /^[[:space:]]*mm_orderbook/ {next}
            /^[[:space:]]*git\+/ {next}
            {print}
          ' requirements.txt > requirements_ci.txt
          
          echo "pydantic>=2,<3" >> requirements_ci.txt
          echo "pydantic-settings>=2,<3" >> requirements_ci.txt
          echo "pandas>=2,<3" >> requirements_ci.txt
      
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install maturin
          pip install -e . -v
          pip install -r requirements_ci.txt
      
      - name: Show config
        shell: bash
        run: |
          echo "================================================"
          echo "NIGHTLY SOAK CONFIG"
          echo "================================================"
          echo "ref: ${{ inputs.ref }}"
          echo "iterations: ${{ inputs.iterations }}"
          echo "warmup: ${{ inputs.warmup }}"
          echo "auto_tune: ${{ inputs.auto_tune }}"
          echo "sleep_seconds: ${{ inputs.sleep_seconds }}"
          echo "================================================"
      
      - name: Run soak (24 iters, warmup, strict mode)
        shell: bash
        run: |
          echo "================================================"
          echo "NIGHTLY SOAK: ${{ inputs.iterations }} iterations"
          echo "Warmup: ${{ inputs.warmup }}"
          echo "Auto-tune: ${{ inputs.auto_tune }}"
          echo "================================================"
          
          # Build flags
          FLAGS="--mock --preset maker_bias_uplift_v1"
          
          if [ "${{ inputs.auto_tune }}" = "true" ]; then
            FLAGS="$FLAGS --auto-tune"
          fi
          
          if [ "${{ inputs.warmup }}" = "true" ]; then
            FLAGS="$FLAGS --warmup"
          fi
          
          # Run soak
          rm -rf artifacts/soak/latest
          python -m tools.soak.run \
            --iterations ${{ inputs.iterations }} \
            $FLAGS
          
          if [ $? -ne 0 ]; then
            echo "❌ Soak run failed"
            exit 1
          fi
          
          echo "✓ Soak run completed"
          echo "================================================"
      
      - name: Verify delta application (strict, threshold 95%)
        shell: bash
        run: |
          echo "================================================"
          echo "DELTA VERIFICATION (STRICT)"
          echo "Threshold: >=95.0% (nightly mode)"
          echo "================================================"
          
          ROOT="artifacts/soak/latest"
          if compgen -G "$ROOT/ITER_SUMMARY_*.json" > /dev/null; then
            TARGET="$ROOT"
          elif compgen -G "$ROOT/soak/latest/ITER_SUMMARY_*.json" > /dev/null; then
            TARGET="$ROOT/soak/latest"
          else
            echo "Error: ITER_SUMMARY_* not found"
            exit 1
          fi
          
          # Run verifier with strict threshold (95%)
          python -m tools.soak.verify_deltas_applied \
            --path "$TARGET" \
            --threshold 0.95 \
            --strict
          
          if [ $? -ne 0 ]; then
            echo "❌ Strict delta verification FAILED"
            exit 1
          fi
          echo "✓ Strict delta verification passed"
          echo "================================================"
      
      - name: Build reports (strict, blocking)
        shell: bash
        run: |
          echo "================================================"
          echo "GENERATING REPORTS (STRICT)"
          echo "================================================"
          
          ROOT="artifacts/soak/latest"
          OUT="$ROOT/reports/analysis"
          mkdir -p "$OUT"
          
          python -m tools.soak.build_reports --src "$ROOT" --out "$OUT" --last-n 8
          
          if [ $? -ne 0 ]; then
            echo "❌ Report generation FAILED"
            exit 1
          fi
          echo "✓ Reports generated"
          echo "================================================"
      
      - name: Export warm-up metrics for Prometheus
        if: always()
        shell: bash
        run: |
          echo "================================================"
          echo "EXPORTING WARM-UP METRICS (NIGHTLY)"
          echo "================================================"
          
          ROOT="artifacts/soak/latest"
          if compgen -G "$ROOT/ITER_SUMMARY_*.json" > /dev/null; then
            TARGET="$ROOT"
          elif compgen -G "$ROOT/soak/latest/ITER_SUMMARY_*.json" > /dev/null; then
            TARGET="$ROOT/soak/latest"
          else
            echo "[WARN] No ITER_SUMMARY files found"
            exit 0
          fi
          
          python -m tools.soak.export_warmup_metrics \
            --path "$TARGET" \
            --output "$ROOT/reports/analysis/warmup_metrics.prom"
          
          if [ $? -eq 0 ]; then
            echo "✓ Warm-up metrics exported (nightly)"
            echo ""
            echo "Preview (first 20 lines):"
            head -20 "$ROOT/reports/analysis/warmup_metrics.prom" || true
          else
            echo "[WARN] Metrics export failed (non-critical)"
          fi
          
          echo "================================================"
      
      - name: Readiness Gate (strict)
        if: always()
        shell: bash
        env:
          PYTHON_EXE: python
          SOAK_ARTIFACTS_DIR: artifacts/soak/latest
        run: |
          set -euo pipefail
          
          $PYTHON_EXE -m tools.soak.ci_gates.readiness_gate \
            --path "${SOAK_ARTIFACTS_DIR}" \
            --min_maker_taker 0.83 \
            --min_edge 2.9 \
            --max_latency 330 \
            --max_risk 0.40
      
      - name: Upload soak artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: soak-nightly-${{ github.run_number }}
          path: |
            artifacts/soak/latest/reports/
            artifacts/soak/latest/soak/latest/TUNING_REPORT.json
            artifacts/soak/latest/soak/latest/ITER_SUMMARY_*.json
            artifacts/soak/latest/ITER_SUMMARY_*.json
            artifacts/soak/latest/runtime_overrides.json
            artifacts/soak/runtime_overrides.json
          if-no-files-found: warn
          retention-days: 60

