name: Live Mode

on:
  workflow_dispatch:
    inputs:
      profile:
        description: 'Ramp profile (A/B/C)'
        required: false
        default: 'A'
        type: choice
        options:
          - A
          - B
          - C
      symbols:
        description: 'Symbols (comma-separated)'
        required: false
        default: 'BTCUSDT,ETHUSDT'
        type: string
      dry_run:
        description: 'Dry-run mode (no Redis writes)'
        required: false
        default: true
        type: boolean
      iterations:
        description: 'Number of iterations'
        required: false
        default: '1'
        type: string

concurrency:
  group: live-mode
  cancel-in-progress: false

jobs:
  live-test:
    name: Live Mode Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
      PYTHONPATH: "${{ github.workspace }}"
      BYBIT_API_KEY: "test_api_key_for_ci_only"
      BYBIT_API_SECRET: "test_api_secret_for_ci_only"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      
      - name: Prepare minimal requirements for CI
        shell: bash
        run: |
          awk '
            BEGIN{IGNORECASE=1}
            /^[[:space:]]*bybit-connector/ {next}
            /^[[:space:]]*mm-orderbook/ {next}
            /^[[:space:]]*mm_orderbook/ {next}
            /^[[:space:]]*git\+/ {next}
            {print}
          ' requirements.txt > requirements_ci.txt
          
          echo "pydantic>=2,<3" >> requirements_ci.txt
          echo "pydantic-settings>=2,<3" >> requirements_ci.txt
          echo "pandas>=2,<3" >> requirements_ci.txt
          echo "redis>=5,<6" >> requirements_ci.txt
      
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install maturin
          pip install -e . -v
          pip install -r requirements_ci.txt
      
      - name: Run Live Mode (dry-run)
        id: live_run
        continue-on-error: true
        shell: bash
        run: |
          echo "================================================"
          echo "LIVE MODE: Test Run"
          echo "================================================"
          
          DRY_RUN_FLAG=""
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            DRY_RUN_FLAG="--dry-run"
          fi
          
          python -m tools.live.run_live \
            --symbols "${{ inputs.symbols || 'BTCUSDT,ETHUSDT' }}" \
            --ramp-profile "${{ inputs.profile || 'A' }}" \
            --env dev \
            --exchange bybit \
            --iterations "${{ inputs.iterations || '1' }}" \
            $DRY_RUN_FLAG \
            --verbose
          
          EXIT_CODE=$?
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          
          echo ""
          echo "Live run exit code: $EXIT_CODE"
      
      - name: Live Gate
        id: live_gate
        continue-on-error: true
        shell: bash
        run: |
          echo "================================================"
          echo "LIVE GATE: KPI Validation"
          echo "================================================"
          
          python -m tools.live.ci_gates.live_gate \
            --path artifacts/live/latest \
            --min_edge 2.5 \
            --min_maker_taker 0.83 \
            --max_risk 0.40 \
            --max_latency 350
          
          EXIT_CODE=$?
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          
          echo ""
          echo "Live gate exit code: $EXIT_CODE"
      
      - name: Display Live Report
        if: always()
        shell: bash
        run: |
          echo "================================================"
          echo "LIVE REPORT"
          echo "================================================"
          
          if [ -f artifacts/live/latest/LIVE_REPORT.md ]; then
            cat artifacts/live/latest/LIVE_REPORT.md
          else
            echo "‚ùå LIVE_REPORT.md not found"
          fi
          
          echo ""
          echo "================================================"
          echo "LIVE SUMMARY (JSON)"
          echo "================================================"
          
          if [ -f artifacts/live/latest/LIVE_SUMMARY.json ]; then
            cat artifacts/live/latest/LIVE_SUMMARY.json | jq .
          else
            echo "‚ùå LIVE_SUMMARY.json not found"
          fi
      
      - name: Upload Live Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: live-mode-${{ github.run_id }}
          path: |
            artifacts/live/latest/LIVE_*.md
            artifacts/live/latest/LIVE_*.json
          if-no-files-found: warn
          retention-days: 30
      
      - name: Comment Live Results to PR
        if: always() && github.event_name == 'pull_request' && github.event.pull_request.number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const summaryPath = 'artifacts/live/latest/LIVE_SUMMARY.json';
            
            if (!fs.existsSync(summaryPath)) {
              console.log('LIVE_SUMMARY.json not found, skipping comment');
              return;
            }
            
            const summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
            const state = summary.live_state || 'UNKNOWN';
            const throttle = summary.throttle_factor || 0;
            
            const badge = state === 'ACTIVE' ? '‚úÖ' : (state === 'COOLDOWN' ? 'üü°' : 'üî¥');
            
            // Build per-symbol table
            let table = `| Symbol | Throttle | Status |\n|--------|----------|--------|\n`;
            
            for (const [sym, symThrottle] of Object.entries(summary.per_symbol_throttle || {})) {
              const symStatus = symThrottle > 0.8 ? '‚úÖ ACTIVE' : (symThrottle >= 0.3 ? 'üü° COOLDOWN' : 'üî¥ FROZEN');
              table += `| ${sym} | ${symThrottle.toFixed(2)} | ${symStatus} |\n`;
            }
            
            const comment = `### ${badge} Live Mode: ${state}
            
            **Global Throttle:** ${throttle.toFixed(2)}
            **Profile:** ${{ inputs.profile || 'A' }}
            
            ${table}
            
            **Summary:**
            - Active: ${summary.meta.active_count}
            - Cooldown: ${summary.meta.cooldown_count}
            - Frozen: ${summary.meta.frozen_count}
            
            **Reasons:**
            ${summary.reasons.map(r => `- ${r}`).join('\n')}
            
            _Dry-run mode: ${{ inputs.dry_run }}_`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: comment
            });
      
      - name: Check Live Gate Result
        if: always()
        shell: bash
        run: |
          RUN_EXIT="${{ steps.live_run.outputs.exit_code }}"
          GATE_EXIT="${{ steps.live_gate.outputs.exit_code }}"
          
          echo "================================================"
          echo "LIVE MODE RESULT"
          echo "================================================"
          echo "Run exit code: $RUN_EXIT"
          echo "Gate exit code: $GATE_EXIT"
          
          if [ "$RUN_EXIT" = "0" ] && [ "$GATE_EXIT" = "0" ]; then
            echo "‚úÖ Live Mode: PASS"
            exit 0
          else
            echo "‚ùå Live Mode: FAIL"
            echo "Check artifacts for details"
            exit 1
          fi

